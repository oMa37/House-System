#define FILTERSCRIPT

#include <a_samp>
#include <a_mysql>
#include <foreach>
#include <streamer>
#include <sscanf2>
#include <izcmd>
#include <GetVehicleColor>

#define MYSQL_HOST "localhost"
#define MYSQL_USER "root"
#define MYSQL_DATABASE "house_system"
#define MYSQL_PASSWORD ""

#define red 0xFF0000FF
#define green 0x00FF00FF
#define yellow 0xFFFF00FF

#define MAX_HOUSES (100)
#define MAX_HOUSE_NAME (48)
#define MAX_ZONE_NAME (28)
#define MAX_WEAPONS (22)
#define INVALID_HOUSE_ID (-1)

#define PRESSED(%0) \
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

#define RELEASED(%0) \
	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

forward ResetAndSaveHouses();
forward LoadHouses();
forward LoadVehicles(houseid);
forward HideInfoBox(playerid);
forward ShowInfo(playerid);
forward IncreaseAmount(playerid);
forward DecreaseAmount(playerid);
forward SafeMoney(playerid);
forward LoadWeapons(houseid);
forward SwitchWeapons(playerid);

enum _:tDialogs {

	DIALOG_CREATE_HOUSE = 1,
	DIALOG_HOUSE_INTERIOR,
	DIALOG_HOUSE_DAYS,
	DIALOG_HOUSE_PRICE,
	DIALOG_BUY_HOUSE,
	DIALOG_HOUSES
};

enum _:tHouseLockModes {

	MODE_LOCKED,
	MODE_UNLOCKED
};

enum _:tVehicleLockMode {

    V_MODE_UNLOCKED,
	V_MODE_LOCKED
};

enum tHouse {

	Name[MAX_HOUSE_NAME],
	Owner[MAX_PLAYER_NAME],
	Address[48],
	Float:HousePickupX,
	Float:HousePickupY,
	Float:HousePickupZ,
	Float:HouseArrowX,
	Float:HouseArrowY,
	Float:HouseArrowZ,
	Float:HouseVehX,
	Float:HouseVehY,
	Float:HouseVehZ,
	Float:HouseVehA,
	Price,
	Money,
	Interior,
	LockMode,
	Days,
	Expire,
	Text3D:HouseLabel,
	HouseIcon,
	HousePickup,
	HouseArrow,
	HouseCheckpoint,
	bool:Save
};

enum tVehicles {

	vehID,
    vehModel,
    vehName[25],
    vehOwner[MAX_PLAYER_NAME],
    vehPlate[16],
    vehLock,
    vehMod[14],
    vehColorOne,
    vehColorTwo
};

enum tInterior {

	IntName[32],
	Float:IntX,
	Float:IntY,
	Float:IntZ,
	IntID,
	IntPickup
};

enum tBoxes {

	ObjectModel,
	Float:ObjectX,
	Float:ObjectY,
	Float:ObjectZ,
	Float:ObjectRX,
	Float:ObjectRY,
	Float:ObjectRZ,
	ObjectID
};

enum tWeapons {

	WeaponName[32],
	WeaponID
};

new connectionHandle,
	HouseTimer = -1,
	InfoTimer[MAX_PLAYERS],
	HouseData[MAX_HOUSES][tHouse],
	VehicleData[MAX_HOUSES][tVehicles],
	bool:vehSaved[MAX_VEHICLES],
    Iterator:Houses<MAX_HOUSES>,
    InHouse[MAX_PLAYERS] = {INVALID_HOUSE_ID, ...},
    LastVisitedHouse[MAX_PLAYERS] = {INVALID_HOUSE_ID, ...};

new PlayerItem[MAX_PLAYERS], 
    CompleteLoop[MAX_PLAYERS],
    CreatingHouse[MAX_PLAYERS],
    UsingWeaponBox[MAX_PLAYERS],
    UsingSafe[MAX_PLAYERS],
    CurrentAmount[MAX_PLAYERS],
    SavedAmount[MAX_PLAYERS],
    HoldingCount[MAX_PLAYERS],
    HoldingKey[MAX_PLAYERS][3],
    SafeMoneyAnim[MAX_PLAYERS],
    onCheckpoint[MAX_PLAYERS];

new PlayerText:BlackBox[MAX_PLAYERS],
	PlayerText:BoxTitle[MAX_PLAYERS],
	PlayerText:ColumnOne[MAX_PLAYERS],
	PlayerText:ItemOne[MAX_PLAYERS],
	PlayerText:ColumnTwo[MAX_PLAYERS],
	PlayerText:ItemTwo[MAX_PLAYERS];

new gWeapon[MAX_HOUSES][46],
	gWeaponAmmo[MAX_HOUSES][46],
	gNextWeapon[MAX_PLAYERS],
	KeysTimer[MAX_PLAYERS];

new HouseInteriors[][tInterior] = {

    {"Small", 2283.04, -1140.28, 1050.90, 11},
    {"Medium 1", 2237.59, -1081.64, 1049.02, 2},
    {"Medium 2", 2308.77, -1212.94, 1049.02, 6},
    {"Large 1", 2365.2690, -1135.5980, 1050.8826, 8},
    {"Large 2", 2270.38, -1210.35, 1047.56, 10},
    {"Large 3", -68.81, 1351.21, 1080.21, 6},
    {"Large 4", 2317.8020, -1026.7559, 1050.2178, 9},
    {"Large 5", 2196.85, -1204.25, 1049.02, 6},
    {"Large 6", 2323.6753, -1149.5475, 1050.7101, 12}
};

new HouseSafeBoxes[][tBoxes] = {

	{1829, 2279.287109, -1134.114624, 1050.376464, 0.000000, 0.000000, -0.599922},
	{1829, 2245.084228, -1071.099365, 1048.512573, 0.000000, 0.000000, -90.000053},
	{1829, 2312.336181, -1212.468872, 1048.521972, 0.000000, 0.000000, -179.799880},
	{1829, 2375.575683, -1128.687744, 1050.363769, 0.000000, 0.000000, 179.500015},
	{1829, 2252.335449, -1213.722290, 1048.512084, 0.000000, 0.000000, 179.700042},
	{1829, -71.882385, 1360.031738, 1079.690307, 0.000000, 0.000000, 90.000000},
	{1829, 2322.548583, -1007.878723, 1049.709228, 0.000000, 0.000000, -0.199984},
	{1829, 2188.123046, -1206.483520, 1048.501098, 0.000000, 0.000000, 90.000000},
	{1829, 2321.063232, -1137.924926, 1049.972290, 0.000000, 0.000000, 0.700064}
};

new Float:BoxesAngle[][4] = {

	{2279.3201, -1134.5427, 1050.8984, 358.2345},
	{2244.6592, -1071.1339, 1049.0234, 267.6803},
	{2312.3105, -1211.9529, 1049.0234, 181.5128},
	{2375.5483, -1128.4067, 1050.8750, 181.8262},
	{2252.2954, -1213.1879, 1049.0308, 180.2361},
	{-71.2593, 1360.0563, 1080.2185, 90.0187},
	{2322.5725, -1008.2642, 1050.2109, 1.0312},
	{2188.6421, -1206.4487, 1049.0234, 90.3320},
	{2321.1580, -1138.2642, 1050.4922, 1.0312}
};

new HouseWeaponsBoxes[][tBoxes] = {

	{2358, 2281.832031, -1133.601196, 1050.027587, 0.000000, 0.000000, 0.899999},
	{2358, 2240.101318, -1070.680908, 1048.172607, 0.000000, 0.000000, 89.900032},
	{2358, 2305.484863, -1211.491210, 1048.162597, 0.000000, 0.000000, 89.100021},
	{2358, 2361.368408, -1120.436279, 1050.024169, 0.000000, 0.000000, 89.199943},
	{2358, 2257.452880, -1214.183837, 1048.162597, 0.000000, 0.000000, 179.599838},
	{2358, -71.451034, 1367.116943, 1079.340087, 0.000000, 0.000000, 0.899999},
	{2358, 2327.662353, -1016.604064, 1049.356933, 0.000000, 0.000000, 179.799942},
	{2358, 2186.426513, -1200.676757, 1048.183349, 0.000000, 0.000000, 0.899999},
	{2358, 2327.772949, -1137.474121, 1049.671386, 0.000000, 0.000000, 0.899999}
};

new HouseWeapons[MAX_WEAPONS][tWeapons] = {

	{"9mm", WEAPON_COLT45},
	{"Silence 9mm", WEAPON_SILENCED},
	{"Desert Eagle", WEAPON_DEAGLE},
	{"Shotgun", WEAPON_SHOTGUN},
	{"Sawnoff Shotgun", WEAPON_SAWEDOFF},
	{"Combat Shotgun", WEAPON_SHOTGSPA},
	{"Micro SMG", WEAPON_UZI},
	{"MP5", WEAPON_MP5},
	{"AK47", WEAPON_AK47},
	{"M4", WEAPON_M4},
	{"Tec9", WEAPON_TEC9},
	{"Rifle", WEAPON_RIFLE},
	{"Sniper Rifle", WEAPON_SNIPER},
	{"Rocket Launcher", WEAPON_ROCKETLAUNCHER},
	{"Flamethrower", WEAPON_FLAMETHROWER},
	{"Minigun", WEAPON_MINIGUN},
	{"Spraycan", WEAPON_SPRAYCAN},
	{"Fire Extinguisher", WEAPON_FIREEXTINGUISHER},
	{"Camera", WEAPON_CAMERA},
	{"Grenade", WEAPON_GRENADE},
	{"Tear Gas", WEAPON_TEARGAS},
	{"Molotov Cocktail", WEAPON_MOLTOV}
};

enum tSAZones {

    SAZONE_NAME[28],
    Float:SAZONE_AREA[6]
};

static const SAZones[][tSAZones] = {

    {"The Big Ear",                 {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
    {"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
    {"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
    {"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
    {"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
    {"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
    {"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
    {"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
    {"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
    {"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
    {"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
    {"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
    {"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
    {"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
    {"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
    {"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
    {"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
    {"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
    {"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
    {"Blackfield Intersection",     {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
    {"Blackfield Intersection",     {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
    {"Blackfield Intersection",     {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
    {"Blackfield Intersection",     {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
    {"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
    {"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
    {"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
    {"Caligula's Palace",           {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
    {"Caligula's Palace",           {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
    {"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
    {"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
    {"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
    {"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
    {"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
    {"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
    {"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
    {"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
    {"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
    {"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
    {"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
    {"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
    {"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
    {"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
    {"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
    {"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
    {"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
    {"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
    {"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
    {"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
    {"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
    {"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
    {"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
    {"Downtown Los Santos",         {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
    {"Downtown Los Santos",         {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
    {"Downtown Los Santos",         {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
    {"Downtown Los Santos",         {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
    {"Downtown Los Santos",         {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
    {"Downtown Los Santos",         {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
    {"Downtown Los Santos",         {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
    {"Downtown Los Santos",         {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
    {"Downtown Los Santos",         {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
    {"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
    {"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
    {"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
    {"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
    {"East Los Santos",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
    {"East Los Santos",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
    {"East Los Santos",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
    {"East Los Santos",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
    {"East Los Santos",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
    {"East Los Santos",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
    {"East Los Santos",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
    {"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
    {"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
    {"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
    {"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
    {"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
    {"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
    {"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
    {"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
    {"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
    {"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
    {"Easter Bay Chemicals",        {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
    {"Easter Bay Chemicals",        {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
    {"El Castillo del Diablo",      {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
    {"El Castillo del Diablo",      {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
    {"El Castillo del Diablo",      {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
    {"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
    {"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
    {"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
    {"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
    {"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
    {"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
    {"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
    {"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
    {"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
    {"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
    {"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
    {"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
    {"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
    {"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
    {"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
    {"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
    {"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
    {"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
    {"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
    {"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
    {"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
    {"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
    {"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
    {"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
    {"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
    {"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
    {"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
    {"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
    {"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
    {"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
    {"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
    {"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
    {"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
    {"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
    {"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
    {"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
    {"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
    {"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
    {"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
    {"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
    {"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
    {"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
    {"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
    {"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
    {"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
    {"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
    {"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
    {"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
    {"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
    {"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
    {"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
    {"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
    {"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
    {"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
    {"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
    {"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
    {"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
    {"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
    {"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
    {"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
    {"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
    {"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
    {"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
    {"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
    {"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
    {"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
    {"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
    {"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
    {"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
    {"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
    {"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
    {"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
    {"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
    {"K.A.C.C. Military Fuels",     {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
    {"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
    {"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
    {"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
    {"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
    {"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
    {"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
    {"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
    {"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
    {"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
    {"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
    {"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
    {"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
    {"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
    {"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
    {"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
    {"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
    {"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
    {"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
    {"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
    {"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
    {"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
    {"Las Venturas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
    {"Las Venturas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
    {"Las Venturas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
    {"Las Venturas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
    {"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
    {"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
    {"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
    {"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
    {"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
    {"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
    {"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
    {"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
    {"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
    {"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
    {"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
    {"Los Santos International",    {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
    {"Los Santos International",    {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
    {"Los Santos International",    {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
    {"Los Santos International",    {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
    {"Los Santos International",    {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
    {"Los Santos International",    {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
    {"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
    {"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
    {"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
    {"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
    {"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
    {"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
    {"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
    {"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
    {"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
    {"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
    {"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
    {"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
    {"Montgomery Intersection",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
    {"Montgomery Intersection",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
    {"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
    {"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
    {"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
    {"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
    {"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
    {"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
    {"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
    {"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
    {"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
    {"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
    {"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
    {"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
    {"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
    {"Mulholland Intersection",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
    {"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
    {"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
    {"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
    {"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
    {"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
    {"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
    {"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
    {"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
    {"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
    {"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
    {"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
    {"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
    {"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
    {"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
    {"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
    {"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
    {"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
    {"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
    {"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
    {"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
    {"Pirates in Men's Pants",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
    {"Playa del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
    {"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
    {"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
    {"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
    {"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
    {"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
    {"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
    {"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
    {"Randolph Industrial Estate",  {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
    {"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
    {"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
    {"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
    {"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
    {"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
    {"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
    {"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
    {"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
    {"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
    {"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
    {"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
    {"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
    {"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
    {"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
    {"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
    {"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
    {"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
    {"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
    {"Robada Intersection",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
    {"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
    {"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
    {"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
    {"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
    {"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
    {"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
    {"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
    {"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
    {"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
    {"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
    {"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
    {"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
    {"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
    {"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
    {"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
    {"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
    {"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
    {"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
    {"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
    {"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
    {"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
    {"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
    {"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
    {"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
    {"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
    {"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
    {"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
    {"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
    {"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
    {"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
    {"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
    {"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
    {"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
    {"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
    {"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
    {"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
    {"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
    {"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
    {"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
    {"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
    {"The Four Dragons Casino",     {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
    {"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
    {"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
    {"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
    {"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
    {"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
    {"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
    {"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
    {"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
    {"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
    {"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
    {"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
    {"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
    {"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
    {"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
    {"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
    {"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
    {"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
    {"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
    {"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
    {"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
    {"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
    {"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
    {"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
    {"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
    {"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
    {"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
    {"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
    {"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
    {"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
    {"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
    {"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
    {"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
    {"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
    {"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
    {"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
    {"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
    // Main Zones
    {"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
    {"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
    {"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
    {"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
    {"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
    {"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
    {"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
    {"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
    {"Mount Chiliad",               {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
};

new AnimationLibraries[][] = {

    "AIRPORT", "Attractors", "BAR", "BASEBALL", "BD_FIRE", "BEACH", "benchpress", "BF_injection", "BIKED", "BIKEH", "BIKELEAP",
    "BIKES", "BIKEV", "BIKE_DBZ", "BLOWJOBZ", "BMX", "BOMBER", "BOX", "BSKTBALL", "BUDDY", "BUS", "CAMERA", "CAR", "CARRY", "CAR_CHAT",
    "CASINO", "CHAINSAW", "CHOPPA", "CLOTHES", "COACH", "COLT45", "COP_AMBIENT", "COP_DVBYZ", "CRACK", "CRIB", "DAM_JUMP", "DANCING",
    "DEALER", "DILDO", "DODGE", "DOZER", "DRIVEBYS", "FAT", "FIGHT_B", "FIGHT_C", "FIGHT_D", "FIGHT_E", "FINALE", "FINALE2", "FLAME",
    "Flowers", "FOOD", "Freeweights", "GANGS", "GHANDS", "GHETTO_DB", "goggles", "GRAFFITI", "GRAVEYARD", "GRENADE", "GYMNASIUM", "HAIRCUTS",
    "HEIST9", "INT_HOUSE", "INT_OFFICE", "INT_SHOP", "JST_BUISNESS", "KART", "KISSING", "KNIFE", "LAPDAN1", "LAPDAN2", "LAPDAN3", "LOWRIDER",
    "MD_CHASE", "MD_END", "MEDIC", "MISC", "MTB", "MUSCULAR", "NEVADA", "ON_LOOKERS", "OTB", "PARACHUTE", "PARK", "PAULNMAC", "ped", "PLAYER_DVBYS",
    "PLAYIDLES", "POLICE", "POOL", "POOR", "PYTHON", "QUAD", "QUAD_DBZ", "RAPPING", "RIFLE", "RIOT", "ROB_BANK", "ROCKET", "RUSTLER", "RYDER",
    "SCRATCHING", "SHAMAL", "SHOP", "SHOTGUN", "SILENCED", "SKATE", "SMOKING", "SNIPER", "SPRAYCAN", "STRIP", "SUNBATHE", "SWAT", "SWEET", "SWIM",
    "SWORD", "TANK", "TATTOOS", "TEC", "TRAIN", "TRUCK", "UZI", "VAN", "VENDING", "VORTEX", "WAYFARER", "WEAPONS", "WUZI", "SAMP"
};

public OnFilterScriptInit() {

	mysql_log(LOG_ALL);
    connectionHandle = mysql_connect(MYSQL_HOST, MYSQL_USER, MYSQL_DATABASE, MYSQL_PASSWORD);
    if(mysql_errno() != 0)
        print("[MySQL] Failed Connection");
    else
        print("[MySQL] Successfully Connected");

    mysql_tquery(connectionHandle, "CREATE TABLE IF NOT EXISTS `Houses` (\
    	`ID` int(11) NOT NULL,\
    	`HouseOwner` varchar(25) NOT NULL default '-',\
    	`HouseAddress` varchar(48) NOT NULL default '-',\
    	`HousePickupX` float NOT NULL,\
    	`HousePickupY` float NOT NULL,\
    	`HousePickupZ` float NOT NULL,\
		`HouseArrowX` float NOT NULL,\
    	`HouseArrowY` float NOT NULL,\
    	`HouseArrowZ` float NOT NULL,\
    	`HouseVehX` float NOT NULL,\
    	`HouseVehY` float NOT NULL,\
    	`HouseVehZ` float NOT NULL,\
    	`HouseVehA` float NOT NULL,\
    	`HousePrice` int(11) NOT NULL,\
    	`HouseInterior` int(11) NOT NULL,\
    	`HouseLock` int(11) NOT NULL,\
    	`HouseMoney` int(11) NOT NULL,\
    	`HouseExpire` int(11) NOT NULL,\
    	`HouseDays` int(11) NOT NULL,\
    	PRIMARY KEY (`ID`),\
    	UNIQUE KEY `ID` (`ID`)) ENGINE=InnoDB DEFAULT CHARSET=utf8;");

    mysql_tquery(connectionHandle, "CREATE TABLE IF NOT EXISTS `HouseWeapons` (\
    	`Owner` varchar(25) NOT NULL,\
    	`WeaponID` tinyint(3) NOT NULL,\
    	`Ammo` int(11) NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8;");

    mysql_tquery(connectionHandle, "CREATE TABLE IF NOT EXISTS `HouseVehicles` (\
    	`HouseID` int(11) NOT NULL,\
      	`vehModel` int(11) NOT NULL,\
      	`vehName` varchar(25) NOT NULL,\
      	`vehOwner` varchar(25) NOT NULL default '-',\
      	`vehPlate` varchar(16) NOT NULL default 'UG',\
      	`vehLock` int(11) NOT NULL,\
      	`vehMod_1` int(11) NOT NULL,\
      	`vehMod_2` int(11) NOT NULL,\
      	`vehMod_3` int(11) NOT NULL,\
      	`vehMod_4` int(11) NOT NULL,\
      	`vehMod_5` int(11) NOT NULL,\
      	`vehMod_6` int(11) NOT NULL,\
      	`vehMod_7` int(11) NOT NULL,\
      	`vehMod_8` int(11) NOT NULL,\
      	`vehMod_9` int(11) NOT NULL,\
      	`vehMod_10` int(11) NOT NULL,\
      	`vehMod_11` int(11) NOT NULL,\
      	`vehMod_12` int(11) NOT NULL,\
      	`vehMod_13` int(11) NOT NULL,\
      	`vehMod_14` int(11) NOT NULL,\
      	`vehColorOne` int(11) NOT NULL default 211,\
      	`vehColorTwo` int(11) NOT NULL default 0,\
      	`vehX` float NOT NULL,\
      	`vehY` float NOT NULL,\
      	`vehZ` float NOT NULL,\
      	`vehA` float NOT NULL,\
      	UNIQUE KEY `HouseID_1` (`HouseID`),\
      	KEY `HouseID` (`HouseID`),\
      	CONSTRAINT `housevehicles_ibfk_1` FOREIGN KEY (`HouseID`) REFERENCES `Houses` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE) ENGINE=InnoDB DEFAULT CHARSET=utf8;");

    for(new i; i < MAX_HOUSES; i++) {

		HouseData[i][HouseLabel] = Text3D: INVALID_3DTEXT_ID;
		HouseData[i][HousePickup] = -1;
		HouseData[i][HouseArrow] = -1;
		HouseData[i][HouseIcon] = -1;
		HouseData[i][Save] = false;
	}

	for(new i; i < sizeof(HouseInteriors); i++) {

		HouseInteriors[i][IntPickup] = CreateDynamicPickup(1318, 1, HouseInteriors[i][IntX], HouseInteriors[i][IntY], HouseInteriors[i][IntZ], .interiorid = HouseInteriors[i][IntID]);
	}

	for(new i; i < sizeof(HouseSafeBoxes); i++) {

		HouseSafeBoxes[i][ObjectID] = CreateDynamicObject(HouseSafeBoxes[i][ObjectModel], HouseSafeBoxes[i][ObjectX], HouseSafeBoxes[i][ObjectY], HouseSafeBoxes[i][ObjectZ], HouseSafeBoxes[i][ObjectRX], HouseSafeBoxes[i][ObjectRY], HouseSafeBoxes[i][ObjectRZ]);
	}

	for(new i; i < sizeof(HouseWeaponsBoxes); i++) {

		HouseWeaponsBoxes[i][ObjectID] = CreateDynamicObject(HouseWeaponsBoxes[i][ObjectModel], HouseWeaponsBoxes[i][ObjectX], HouseWeaponsBoxes[i][ObjectY], HouseWeaponsBoxes[i][ObjectZ], HouseWeaponsBoxes[i][ObjectRX], HouseWeaponsBoxes[i][ObjectRY], HouseWeaponsBoxes[i][ObjectRZ]);
	}

	DisableInteriorEnterExits();
    mysql_tquery(connectionHandle, "SELECT * FROM `Houses`", "LoadHouses", "");
    HouseTimer = SetTimer("ResetAndSaveHouses", 5 * 60000, 1);
	return 1;
}

public OnFilterScriptExit() {

	mysql_close(connectionHandle);

	for(new i; i < sizeof(HouseSafeBoxes); i++) {

		DestroyDynamicObject(HouseSafeBoxes[i][ObjectID]);
	}

	for(new i; i < sizeof(HouseWeaponsBoxes); i++) {

		DestroyDynamicObject(HouseWeaponsBoxes[i][ObjectID]);
	}

	foreach(new playerid : Player) {

		foreach(new i : Houses) {

			if(!strcmp(HouseData[i][Owner], playerName(playerid))) {

				DestroyDynamicPickup(HouseData[i][HouseArrow]);
			}
		}

		KillTimer(InfoTimer[playerid]);
		PlayerTextDrawDestroy(playerid, BlackBox[playerid]);
		PlayerTextDrawDestroy(playerid, BoxTitle[playerid]);
		PlayerTextDrawDestroy(playerid, ColumnOne[playerid]);
		PlayerTextDrawDestroy(playerid, ItemOne[playerid]);
		PlayerTextDrawDestroy(playerid, ColumnTwo[playerid]);
		PlayerTextDrawDestroy(playerid, ItemTwo[playerid]);
	}

	KillTimer(HouseTimer);
	return 1;
}

public OnPlayerConnect(playerid) {

	InHouse[playerid] = INVALID_HOUSE_ID;
	LastVisitedHouse[playerid] = INVALID_HOUSE_ID;
	CreatingHouse[playerid] = INVALID_HOUSE_ID;
	UsingSafe[playerid] = UsingWeaponBox[playerid] = INVALID_HOUSE_ID;
	CurrentAmount[playerid] = 0;
	SavedAmount[playerid] = 0;
	SafeMoneyAnim[playerid] = 0;
	gNextWeapon[playerid] = 0;
	onCheckpoint[playerid] = INVALID_VEHICLE_ID;
	HoldingCount[playerid] = HoldingKey[playerid][0] = HoldingKey[playerid][1] = 0;

	foreach(new i : Houses) {

		if(!strcmp(HouseData[i][Owner], playerName(playerid))) {

			HouseData[i][HouseArrow] = CreateDynamicPickup(1318, 1, HouseData[i][HouseArrowX], HouseData[i][HouseArrowY], HouseData[i][HouseArrowZ]);

			new query[58];
			mysql_format(connectionHandle, query, sizeof query, "SELECT * FROM `HouseVehicles` WHERE `HouseID` = %i", i);
			mysql_tquery(connectionHandle, query, "LoadVehicles", "i", i);
		}
	}

	for (new i; i < sizeof(AnimationLibraries); i++) {

        ApplyAnimation(playerid, AnimationLibraries[i], "null", 0.0, 0, 0, 0, 0, 0);
    }

    BlackBox[playerid] = CreatePlayerTextDraw(playerid, 198.500000, 157.739990, "usebox");
	PlayerTextDrawLetterSize(playerid, BlackBox[playerid], 0.000000, 15.114445);
	PlayerTextDrawTextSize(playerid, BlackBox[playerid], 23.500000, 0.000000);
	PlayerTextDrawAlignment(playerid, BlackBox[playerid], 1);
	PlayerTextDrawColor(playerid, BlackBox[playerid], 0);
	PlayerTextDrawUseBox(playerid, BlackBox[playerid], true);
	PlayerTextDrawBoxColor(playerid, BlackBox[playerid], 136);
	PlayerTextDrawSetShadow(playerid, BlackBox[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BlackBox[playerid], 0);
	PlayerTextDrawFont(playerid, BlackBox[playerid], 0);

	BoxTitle[playerid] = CreatePlayerTextDraw(playerid, 35.500000, 138.320053, "Safe");
	PlayerTextDrawLetterSize(playerid, BoxTitle[playerid], 1.018500, 3.089598);
	PlayerTextDrawAlignment(playerid, BoxTitle[playerid], 1);
	PlayerTextDrawColor(playerid, BoxTitle[playerid], -1);
	PlayerTextDrawSetShadow(playerid, BoxTitle[playerid], 0);
	PlayerTextDrawSetOutline(playerid, BoxTitle[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, BoxTitle[playerid], 255);
	PlayerTextDrawFont(playerid, BoxTitle[playerid], 0);
	PlayerTextDrawSetProportional(playerid, BoxTitle[playerid], 1);

	ColumnOne[playerid] = CreatePlayerTextDraw(playerid, 35.500000, 179.200073, "Money");
	PlayerTextDrawLetterSize(playerid, ColumnOne[playerid], 0.485498, 1.952799);
	PlayerTextDrawAlignment(playerid, ColumnOne[playerid], 1);
	PlayerTextDrawColor(playerid, ColumnOne[playerid], -2139062017);
	PlayerTextDrawSetShadow(playerid, ColumnOne[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ColumnOne[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, ColumnOne[playerid], 255);
	PlayerTextDrawFont(playerid, ColumnOne[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ColumnOne[playerid], 1);

	ItemOne[playerid] = CreatePlayerTextDraw(playerid, 36.500000, 199.919967, "0");
	PlayerTextDrawLetterSize(playerid, ItemOne[playerid], 0.396999, 1.980799);
	PlayerTextDrawAlignment(playerid, ItemOne[playerid], 1);
	PlayerTextDrawColor(playerid, ItemOne[playerid], -1378294017);
	PlayerTextDrawSetShadow(playerid, ItemOne[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ItemOne[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, ItemOne[playerid], 255);
	PlayerTextDrawFont(playerid, ItemOne[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ItemOne[playerid], 1);

	ColumnTwo[playerid] = CreatePlayerTextDraw(playerid, 34.000000, 234.079956, "Saved Amount");
	PlayerTextDrawLetterSize(playerid, ColumnTwo[playerid], 0.485498, 1.952799);
	PlayerTextDrawAlignment(playerid, ColumnTwo[playerid], 1);
	PlayerTextDrawColor(playerid, ColumnTwo[playerid], -2139062017);
	PlayerTextDrawSetShadow(playerid, ColumnTwo[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ColumnTwo[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, ColumnTwo[playerid], 255);
	PlayerTextDrawFont(playerid, ColumnTwo[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ColumnTwo[playerid], 1);

	ItemTwo[playerid] = CreatePlayerTextDraw(playerid, 36.500000, 254.800003, "0");
	PlayerTextDrawLetterSize(playerid, ItemTwo[playerid], 0.396999, 1.980799);
	PlayerTextDrawAlignment(playerid, ItemTwo[playerid], 1);
	PlayerTextDrawColor(playerid, ItemTwo[playerid], -1378294017);
	PlayerTextDrawSetShadow(playerid, ItemTwo[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ItemTwo[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, ItemTwo[playerid], 255);
	PlayerTextDrawFont(playerid, ItemTwo[playerid], 1);
	PlayerTextDrawSetProportional(playerid, ItemTwo[playerid], 1);
	return 1;
}

public OnPlayerDisconnect(playerid, reason) {

	foreach(new i : Houses) {

		if(!strcmp(HouseData[i][Owner], playerName(playerid))) {

			DestroyDynamicPickup(HouseData[i][HouseArrow]);
		}
	}

	KillTimer(KeysTimer[playerid]);
	KillTimer(InfoTimer[playerid]);

	PlayerTextDrawDestroy(playerid, BlackBox[playerid]);
	PlayerTextDrawDestroy(playerid, BoxTitle[playerid]);
	PlayerTextDrawDestroy(playerid, ColumnOne[playerid]);
	PlayerTextDrawDestroy(playerid, ItemOne[playerid]);
	PlayerTextDrawDestroy(playerid, ColumnTwo[playerid]);
	PlayerTextDrawDestroy(playerid, ItemTwo[playerid]);
	return 1;
}

public OnPlayerSpawn(playerid) {

	InHouse[playerid] = INVALID_HOUSE_ID;
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate) {

	if(newstate == PLAYER_STATE_DRIVER) {

		foreach(new i : Houses) {

			if(!strcmp(HouseData[i][Owner], playerName(playerid))) {

				HouseData[i][HouseCheckpoint] = CreateDynamicCP(HouseData[i][HouseVehX], HouseData[i][HouseVehY], HouseData[i][HouseVehZ], 7.0, 0, 0, playerid, 25.0);
			}
		}
	}
	if(oldstate == PLAYER_STATE_DRIVER) {

		foreach(new i : Houses) {

			if(!strcmp(HouseData[i][Owner], playerName(playerid))) {

				if(IsValidDynamicCP(HouseData[i][HouseCheckpoint]))
					DestroyDynamicCP(HouseData[i][HouseCheckpoint]);

				if(onCheckpoint[playerid] != INVALID_VEHICLE_ID && IsPlayerInRangeOfPoint(playerid, 5.0, HouseData[i][HouseVehX], HouseData[i][HouseVehY], HouseData[i][HouseVehZ])) {

					if(vehSaved[onCheckpoint[playerid]] == true) {

						SaveVehicle(i);
						return 1;
					}

					DestroyVehicle(onCheckpoint[playerid]);

					VehicleData[i][vehID] = CreateVehicle(VehicleData[i][vehModel], HouseData[i][HouseVehX], HouseData[i][HouseVehY], HouseData[i][HouseVehZ], HouseData[i][HouseVehA], VehicleData[i][vehColorOne], VehicleData[i][vehColorTwo], -1);

					vehSaved[VehicleData[i][vehID]] = true;
					onCheckpoint[playerid] = INVALID_VEHICLE_ID;

					new query[384];
					mysql_format(connectionHandle, query, sizeof query, "DELETE FROM `HouseVehicles` WHERE `HouseID` = %i", i);
					mysql_tquery(connectionHandle, query);

					mysql_format(connectionHandle, query, sizeof query, 
					"INSERT INTO `HouseVehicles`\
					(HouseID, vehModel, vehName, vehOwner, vehPlate, vehLock, vehColorOne, vehColorTwo, vehX, vehY, vehZ, vehA)\
					VALUES\
					(%i, %i, '%e', '%e', '%e', %i, %i, %i, %f, %f, %f, %f)",
					i, VehicleData[i][vehModel], VehicleData[i][vehName], VehicleData[i][vehOwner], VehicleData[i][vehPlate], VehicleData[i][vehLock], VehicleData[i][vehColorOne], 
					VehicleData[i][vehColorTwo], HouseData[i][HouseVehX], HouseData[i][HouseVehY], HouseData[i][HouseVehZ], HouseData[i][HouseVehA]);
					mysql_tquery(connectionHandle, query);
				}
			}
		}
	}
	return 1;
}

public OnPlayerEnterDynamicCP(playerid, checkpointid) {

	if(IsPlayerInAnyVehicle(playerid)) {

		foreach(new i : Houses) {

			if(!strcmp(HouseData[i][Owner], playerName(playerid))) {

				if(checkpointid == HouseData[i][HouseCheckpoint]) {

				    new vehicleid = GetPlayerVehicleID(playerid), color1, color2;
				    GetVehicleColor(vehicleid, color1, color2);
					
					onCheckpoint[playerid] = vehicleid;
					if(vehSaved[vehicleid] == false) {

						format(VehicleData[i][vehName], 25, GetVehicleName(vehicleid));
						format(VehicleData[i][vehOwner], MAX_PLAYER_NAME, playerName(playerid));
						format(VehicleData[i][vehPlate], 16, "-");
						VehicleData[i][vehModel] = GetVehicleModel(vehicleid);
						VehicleData[i][vehLock] = V_MODE_UNLOCKED;
						VehicleData[i][vehColorOne] = color1;
						VehicleData[i][vehColorTwo] = color2;

						SendClientMessage(playerid, green, "Leave the vehicle to save it");
					}
				}
			}
		}
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	if(vehSaved[vehicleid] != true)
		vehSaved[vehicleid] = false;

    foreach(new playerid : Player) {

    	foreach(new i : Houses) {

    		if(!strcmp(HouseData[i][Owner], playerName(playerid))) {

    			if(VehicleData[i][vehID] == vehicleid) {

    				for(new x = 0; x < 14; x++) {

    					if(VehicleData[i][vehMod][x] > 0) AddVehicleComponent(VehicleData[i][vehID], VehicleData[i][vehMod][x]);
    				}

                    new id = GetID(HouseData[i][Owner]);
                    if(playerid != id) SetVehicleParamsForPlayer(VehicleData[i][vehLock], playerid, 0, 1);
    			}
    		}
    	}
    }
    return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid) {

	foreach(new i : Houses) {

		if(!strcmp(HouseData[i][Owner], playerName(playerid))) {

			if(VehicleData[i][vehID] == vehicleid) {

                for(new x; x < 14; x++)
                {
                    if(GetVehicleComponentType(componentid) == x)
                    {
                        VehicleData[i][vehMod][x] = componentid;
                    }
                }
            }
        }
    }
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys) {

	if(newkeys & KEY_WALK) {

		if(InHouse[playerid] == INVALID_HOUSE_ID) {

			foreach(new i : Houses) {

				if(IsPlayerInRangeOfPoint(playerid, 1.0, HouseData[i][HousePickupX], HouseData[i][HousePickupY], HouseData[i][HousePickupZ])) {

					if(!strcmp(HouseData[i][Owner], "-")) {

						SetPVarInt(playerid, "HousePickupID", i);

						new string[128];
	                	format(string, sizeof(string), "{FFFFFF}House: {00FF00}%d\n{FFFFFF}Price: {00FF00}$%s\n{FFFFFF}Interior: {00FF00}%s\n{FFFFFF}Buy it?", i, formatNumber(HouseData[i][Price]), HouseInteriors[HouseData[i][Interior]][IntName]);
	               	 	ShowPlayerDialog(playerid, DIALOG_BUY_HOUSE, DIALOG_STYLE_MSGBOX, "Buy House", string, "Buy", "Close");
					}
				}
			}
		}
	}
	if(newkeys & KEY_YES) {

		if(InHouse[playerid] == INVALID_HOUSE_ID) {

			foreach(new i : Houses) {

				if(IsPlayerInRangeOfPoint(playerid, 1.0, HouseData[i][HouseArrowX], HouseData[i][HouseArrowY], HouseData[i][HouseArrowZ])) {

					if(strcmp(HouseData[i][Owner], playerName(playerid)) && HouseData[i][LockMode] == MODE_LOCKED) {

						new string[94];
	                	format(string, sizeof string, "%s is buzzing your house, Press H to answer the buzzer", playerName(playerid));

	                	new id = ownerID(i);
						if(IsPlayerConnected(id) && InHouse[id] == i) {

							SendClientMessage(playerid, green, string);
							SetPVarInt(id, "playerBuzzer", playerid);
						}
					}
				}
			}
		}
	}
	if(newkeys & KEY_CTRL_BACK) {

		new id = GetPVarInt(playerid, "playerBuzzer");
		if(InHouse[id] == INVALID_HOUSE_ID) {

			foreach(new i : Houses) {

				if(IsPlayerInRangeOfPoint(id, 2.0, HouseData[i][HouseArrowX], HouseData[i][HouseArrowY], HouseData[i][HouseArrowZ])) {

					if(strcmp(HouseData[i][Owner], playerName(id)) && HouseData[i][LockMode] == MODE_LOCKED) {

						SendToHouse(id, i);
					}
				}
			}
		}
	}
	if(newkeys & KEY_SECONDARY_ATTACK) {

		if(InHouse[playerid] != INVALID_HOUSE_ID) {

			if(!strcmp(HouseData[InHouse[playerid]][Owner], playerName(playerid))) {

				for(new i; i < sizeof(BoxesAngle); i++) {

                    SetPlayerArmedWeapon(playerid, 0);

					if(UsingSafe[playerid] != INVALID_HOUSE_ID) {

						PlayerTextDrawHide(playerid, BlackBox[playerid]);
						PlayerTextDrawHide(playerid, BoxTitle[playerid]);
						PlayerTextDrawHide(playerid, ColumnOne[playerid]);
						PlayerTextDrawHide(playerid, ColumnTwo[playerid]);
						PlayerTextDrawHide(playerid, ItemOne[playerid]);
						PlayerTextDrawHide(playerid, ItemTwo[playerid]);

						CurrentAmount[playerid] = 0;
						SavedAmount[playerid] = 0;
						HoldingCount[playerid] = HoldingKey[playerid][0] = HoldingKey[playerid][1] = 0;
						UsingSafe[playerid] = INVALID_HOUSE_ID;
						TogglePlayerControllable(playerid, 1);
						return 1;
					}

					if(IsPlayerInRangeOfPoint(playerid, 0.1, BoxesAngle[i][0], BoxesAngle[i][1], BoxesAngle[i][2]) && UsingSafe[playerid] == -1) {

						UsingSafe[playerid] = 1;
						SetCameraBehindPlayer(playerid);
						TogglePlayerControllable(playerid, 0);
						SetPlayerFacingAngle(playerid, BoxesAngle[i][3]);

						SendClientMessage(playerid, green, "Press LSHIFT to increase amount, LMB to decrease amount");
						SendClientMessage(playerid, green, "Press SPACE to confirm and RETURN to exit");

						PlayerTextDrawShow(playerid, BlackBox[playerid]);
						PlayerTextDrawShow(playerid, BoxTitle[playerid]);
						PlayerTextDrawShow(playerid, ColumnOne[playerid]);
						PlayerTextDrawShow(playerid, ColumnTwo[playerid]);

						PlayerTextDrawSetString(playerid, BoxTitle[playerid], "Safe");
						PlayerTextDrawSetString(playerid, ColumnOne[playerid], "Money");
						PlayerTextDrawSetString(playerid, ColumnTwo[playerid], "Saved Money");

						CurrentAmount[playerid] = GetPlayerMoney(playerid);
						SavedAmount[playerid] = HouseData[InHouse[playerid]][Money];

						new currentamount[11], savedamount[11];
						format(currentamount, sizeof currentamount, "$%s", formatNumber(GetPlayerMoney(playerid)));
						format(savedamount, sizeof savedamount, "$%s", formatNumber(HouseData[InHouse[playerid]][Money]));

						PlayerTextDrawSetString(playerid, ItemOne[playerid], currentamount);
						PlayerTextDrawSetString(playerid, ItemTwo[playerid], savedamount);
						PlayerTextDrawShow(playerid, ItemOne[playerid]);
						PlayerTextDrawShow(playerid, ItemTwo[playerid]);
						return 1;
					}

					if(UsingWeaponBox[playerid] != INVALID_HOUSE_ID) {

						PlayerTextDrawHide(playerid, BlackBox[playerid]);
						PlayerTextDrawHide(playerid, BoxTitle[playerid]);
						PlayerTextDrawHide(playerid, ColumnOne[playerid]);
						PlayerTextDrawHide(playerid, ColumnTwo[playerid]);
						PlayerTextDrawHide(playerid, ItemOne[playerid]);
						PlayerTextDrawHide(playerid, ItemTwo[playerid]);

						CurrentAmount[playerid] = 0;
						SavedAmount[playerid] = 0;
						HoldingCount[playerid] = HoldingKey[playerid][0] = HoldingKey[playerid][1] = 0;
						UsingWeaponBox[playerid] = INVALID_HOUSE_ID;
						gNextWeapon[playerid] = 0;

						KillTimer(KeysTimer[playerid]);
						TogglePlayerControllable(playerid, 1);
						return 1;
					}

					if(IsPlayerInRangeOfPoint(playerid, 2.5, HouseWeaponsBoxes[i][ObjectX], HouseWeaponsBoxes[i][ObjectY], HouseWeaponsBoxes[i][ObjectZ]) && UsingWeaponBox[playerid] == -1) {

						UsingWeaponBox[playerid] = 1;
						TogglePlayerControllable(playerid, 0);

						SendClientMessage(playerid, green, "Press LEFT or RIGHT to select weapon");
						SendClientMessage(playerid, green, "Press LSHIFT to increase ammo, LMB to decrease ammo");
						SendClientMessage(playerid, green, "Press SPACE to confirm and RETURN to exit");

						KeysTimer[playerid] = SetTimerEx("SwitchWeapons", 100, true, "i", playerid);

						PlayerTextDrawShow(playerid, BlackBox[playerid]);
						PlayerTextDrawShow(playerid, BoxTitle[playerid]);
						PlayerTextDrawShow(playerid, ColumnOne[playerid]);
						PlayerTextDrawShow(playerid, ColumnTwo[playerid]);

						PlayerTextDrawSetString(playerid, BoxTitle[playerid], "Weapons");
						PlayerTextDrawSetString(playerid, ColumnOne[playerid], HouseWeapons[0][WeaponName]);
						PlayerTextDrawSetString(playerid, ColumnTwo[playerid], "Saved Ammo");

						SetPlayerArmedWeapon(playerid, HouseWeapons[0][WeaponID]);

                        new currentammo[11], savedammo[11];
						format(currentammo, sizeof currentammo, "%i", GetPlayerWeaponAmmo(playerid, HouseWeapons[0][WeaponID]));
						format(savedammo, sizeof savedammo, "%i", gWeaponAmmo[InHouse[playerid]][HouseWeapons[0][WeaponID]]);

                        CurrentAmount[playerid] = GetPlayerWeaponAmmo(playerid, HouseWeapons[0][WeaponID]);
                        SavedAmount[playerid] = gWeaponAmmo[InHouse[playerid]][HouseWeapons[0][WeaponID]];

						PlayerTextDrawSetString(playerid, ItemOne[playerid], currentammo);
						PlayerTextDrawSetString(playerid, ItemTwo[playerid], savedammo);
						PlayerTextDrawShow(playerid, ItemOne[playerid]);
						PlayerTextDrawShow(playerid, ItemTwo[playerid]);
						return 1;
					}
				}
			}
		}
	}
	if(PRESSED(KEY_JUMP) && HoldingKey[playerid][0] == 0)
	{
		if(InHouse[playerid] != INVALID_HOUSE_ID) {

			if(!strcmp(HouseData[InHouse[playerid]][Owner], playerName(playerid))) {

				if(UsingSafe[playerid] != INVALID_HOUSE_ID || UsingWeaponBox[playerid] != INVALID_HOUSE_ID) {

					IncreaseAmount(playerid);
					HoldingKey[playerid][0] = 1;
				}
			}
		}
	}
	if(PRESSED(KEY_FIRE) && HoldingKey[playerid][1] == 0)
	{
		if(InHouse[playerid] != INVALID_HOUSE_ID) {

			if(!strcmp(HouseData[InHouse[playerid]][Owner], playerName(playerid))) {

				if(UsingSafe[playerid] != INVALID_HOUSE_ID || UsingWeaponBox[playerid] != INVALID_HOUSE_ID) {
				    
				    DecreaseAmount(playerid);
				    HoldingKey[playerid][1] = 1;
				}
			}
		}
	}
	if(RELEASED(KEY_JUMP | KEY_FIRE)) {

		if(InHouse[playerid] != INVALID_HOUSE_ID) {

			if(!strcmp(HouseData[InHouse[playerid]][Owner], playerName(playerid))) {

				if(UsingSafe[playerid] != INVALID_HOUSE_ID || UsingWeaponBox[playerid] != INVALID_HOUSE_ID) {

				    HoldingCount[playerid] = 0;
				}
			}
		}
	}
	if(newkeys & KEY_SPRINT) {

		if(InHouse[playerid] != INVALID_HOUSE_ID) {

			if(!strcmp(HouseData[InHouse[playerid]][Owner], playerName(playerid))) {

				if(UsingSafe[playerid] != INVALID_HOUSE_ID && (SavedAmount[playerid] != HouseData[InHouse[playerid]][Money] || CurrentAmount[playerid] != GetPlayerMoney(playerid)) && SafeMoneyAnim[playerid] == 0) {

				    PlayerTextDrawHide(playerid, BlackBox[playerid]);
					PlayerTextDrawHide(playerid, BoxTitle[playerid]);
					PlayerTextDrawHide(playerid, ColumnOne[playerid]);
					PlayerTextDrawHide(playerid, ColumnTwo[playerid]);
					PlayerTextDrawHide(playerid, ItemOne[playerid]);
					PlayerTextDrawHide(playerid, ItemTwo[playerid]);

					SafeMoneyAnim[playerid] = 1;

					TogglePlayerControllable(playerid, 1);
					ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0, 0);
	    			SetTimerEx("SafeMoney", 2500, 0, "i", playerid);
	    			return 1;
				}

				new weaponid, ammo;
				for (new i; i < 13; i++) {

				    GetPlayerWeaponData(playerid, i, weaponid, ammo);
				    
				    if(weaponid == GetPlayerWeapon(playerid)) {

				    	if(UsingWeaponBox[playerid] != INVALID_HOUSE_ID && (SavedAmount[playerid] != gWeapon[InHouse[playerid]][weaponid] || CurrentAmount[playerid] != ammo)) {

				    		PlayerTextDrawHide(playerid, BlackBox[playerid]);
							PlayerTextDrawHide(playerid, BoxTitle[playerid]);
							PlayerTextDrawHide(playerid, ColumnOne[playerid]);
							PlayerTextDrawHide(playerid, ColumnTwo[playerid]);
							PlayerTextDrawHide(playerid, ItemOne[playerid]);
							PlayerTextDrawHide(playerid, ItemTwo[playerid]);

                            gWeaponAmmo[InHouse[playerid]][weaponid] = SavedAmount[playerid];
                            gWeapon[InHouse[playerid]][weaponid] = weaponid;

                            TogglePlayerControllable(playerid, 1);
                            KillTimer(KeysTimer[playerid]);
                            SetPlayerAmmo(playerid, weaponid, CurrentAmount[playerid]);

							new query[98];
                            if(SavedAmount[playerid] == 0) {

    							mysql_format(connectionHandle, query, sizeof query, "DELETE FROM `HouseWeapons` WHERE `Owner` = '%e' AND `WeaponID` = %i", playerName(playerid),  gWeapon[InHouse[playerid]][weaponid]);
                                mysql_tquery(connectionHandle, query);
                            }
                            else {

                                mysql_format(connectionHandle, query, sizeof query, "INSERT INTO `HouseWeapons` SET `WeaponID` = %i, `Ammo` = %i, `Owner` = '%e'", gWeapon[InHouse[playerid]][weaponid], gWeaponAmmo[InHouse[playerid]][weaponid], playerName(playerid));
                                mysql_tquery(connectionHandle, query);
                            }

							HoldingCount[playerid] = HoldingKey[playerid][0] = HoldingKey[playerid][1] = 0;
							UsingWeaponBox[playerid] = INVALID_HOUSE_ID;
							CurrentAmount[playerid] = 0;
							SavedAmount[playerid] = 0;
							SafeMoneyAnim[playerid] = 0;
				    	}
				    }
				}
			}
		}
	}
	return 1;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid) {

	if(GetPVarInt(playerid, "HousePickupCooldown") < gettime())
	{
	    if(InHouse[playerid] == INVALID_HOUSE_ID) {

			foreach(new i : Houses) {

			    if(pickupid == HouseData[i][HouseArrow]) {

			        SetPVarInt(playerid, "HousePickupCooldown", gettime() + 6);
			        SetPVarInt(playerid, "PickupHouseID", i);
			        
				    switch(HouseData[i][LockMode]) {

				        case MODE_UNLOCKED: SendToHouse(playerid, i);
				        case MODE_LOCKED: {

							if(!strcmp(HouseData[i][Owner], playerName(playerid))) {

					            SendToHouse(playerid, i);
							}
							else {

							    SendClientMessage(playerid, green, "Press Y to start the buzzer of the house to enter");
							}
				        }
				    }
			        return 1;
			    }
			}
		}
		else {

			for(new i; i < sizeof(HouseInteriors); ++i)
			{
			    if(pickupid == HouseInteriors[i][IntPickup])
			    {
			        SetPVarInt(playerid, "HousePickupCooldown", gettime() + 6);
			        SetPlayerVirtualWorld(playerid, 0);
			        SetPlayerInterior(playerid, 0);
			        SetPlayerPos(playerid, HouseData[ InHouse[playerid] ][HousePickupX], HouseData[ InHouse[playerid] ][HousePickupY], HouseData[ InHouse[playerid] ][HousePickupZ]);
			        KillTimer(InfoTimer[playerid]);
			        InHouse[playerid] = INVALID_HOUSE_ID;
			        return 1;
			    }
			}
		}
	}
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[]) {

	switch(dialogid) {

		case DIALOG_CREATE_HOUSE: {

			if(!response) return 0;

			switch(listitem) {

				case 0: {

					new mainstr[256], str[34];
					for(new i; i < sizeof(HouseInteriors); i++) {

						format(str, sizeof str, "{FFFFFF}%s\n", HouseInteriors[i][IntName]);
						strcat(mainstr, str);
					}
					ShowPlayerDialog(playerid, DIALOG_HOUSE_INTERIOR, DIALOG_STYLE_LIST, "House Interior", mainstr, "Choose", "Back");
				}
				case 1: {

					ShowPlayerDialog(playerid, DIALOG_HOUSE_DAYS, DIALOG_STYLE_INPUT, "House Days", "{FFFFFF}Enter the house days below", "Next", "Back");
				}
				case 2: {

					ShowPlayerDialog(playerid, DIALOG_HOUSE_PRICE, DIALOG_STYLE_INPUT, "House Price", "{FFFFFF}Enter the house price below", "Next", "Back");
				}
				case 3: {

					new id = Iter_Free(Houses);
					if(id == -1) return SendClientMessage(playerid, red, "You can't create more houses");

					if(HouseData[id][HousePickupX] == HouseData[id][HouseArrowX]) 
						return SendClientMessage(playerid, red, "You can't create the house pickup at the same position of the house arrow");

					if(HouseData[id][HousePickupX] == HouseData[id][HouseVehX]) 
						return SendClientMessage(playerid, red, "You can't create the house pickup at the same position of the house vehicle storage");

					GetPlayerPos(playerid, HouseData[id][HousePickupX], HouseData[id][HousePickupY], HouseData[id][HousePickupZ]);
					SendClientMessage(playerid, -1, "Change your position and type /createhouse to finish the next steps");
				}
				case 4: {

					new id = Iter_Free(Houses);
					if(id == -1) return SendClientMessage(playerid, red, "You can't create more houses");

					if(HouseData[id][HouseArrowX] == HouseData[id][HousePickupX]) 
						return SendClientMessage(playerid, red, "You can't create the house arrow at the same position of the house pickup");

					if(HouseData[id][HouseArrowX] == HouseData[id][HouseVehX]) 
						return SendClientMessage(playerid, red, "You can't create the house arrow at the same position of the house vehicle storage");

					GetPlayerPos(playerid, HouseData[id][HouseArrowX], HouseData[id][HouseArrowY], HouseData[id][HouseArrowZ]);
					SendClientMessage(playerid, -1, "Change your position and type /createhouse to finish the next steps");
				}
				case 5: {

					new id = Iter_Free(Houses);
					if(id == -1) return SendClientMessage(playerid, red, "You can't create more houses");

					if(HouseData[id][HouseVehX] == HouseData[id][HousePickupX]) 
						return SendClientMessage(playerid, red, "You can't create the house vehicle storage at the same position of the house pickup");

					if(HouseData[id][HouseVehX] == HouseData[id][HouseArrowX]) 
						return SendClientMessage(playerid, red, "You can't create the house vehicle storage at the same position of the house arrow");

					GetPlayerPos(playerid, HouseData[id][HouseVehX], HouseData[id][HouseVehY], HouseData[id][HouseVehZ]);
					GetPlayerFacingAngle(playerid, HouseData[id][HouseVehA]);
					SendClientMessage(playerid, -1, "Change your position and type /createhouse to finish the next steps");
				}
				case 6: {

					new id = Iter_Free(Houses);
					if(id == -1) return SendClientMessage(playerid, red, "You can't create more houses");

					if(HouseData[id][HousePickupX] == 0.0) return SendClientMessage(playerid, red, "You must set the house pickup position");
					if(HouseData[id][HouseArrowX] == 0.0) return SendClientMessage(playerid, red, "You must set the house arrow position");
					if(HouseData[id][HouseVehX] == 0.0) return SendClientMessage(playerid, red, "You must set the house vehicle storage position");
					if(HouseData[id][Days] == 0) return SendClientMessage(playerid, red, "You must set the house days");
					if(HouseData[id][Price] == 0) return SendClientMessage(playerid, red, "You must set the house price");

					format(HouseData[id][Owner], MAX_PLAYER_NAME, "-");

					HouseData[id][Money] = 0;
					HouseData[id][Save] = true;
					CreatingHouse[playerid] = -1;

					format(HouseData[id][Address], 48, "%s, %s", GetCityName(HouseData[id][HousePickupX], HouseData[id][HousePickupY], HouseData[id][HousePickupZ]), GetZoneName(HouseData[id][HousePickupX], HouseData[id][HousePickupY], HouseData[id][HousePickupZ]));

					new query[644];
					format(query, sizeof query, "{FFFF00}House: {2ECC71}%s\n{FFFF00}Interior: {2ECC71}%s\n{FFFF00}Expiration Days: {2ECC71}%s\n{FFFF00}Price: {2ECC71}$%s", 
					formatNumber(id), HouseInteriors[ HouseData[id][Interior] ][IntName], formatNumber(HouseData[id][Days]), formatNumber(HouseData[id][Price]));

					HouseData[id][HouseLabel] = CreateDynamic3DTextLabel(query, 0xFFFFFFFF, HouseData[id][HousePickupX], HouseData[id][HousePickupY], HouseData[id][HousePickupZ] + 0.35, 15.0, .testlos = 1);
				    HouseData[id][HousePickup] = CreateDynamicPickup(1273, 1, HouseData[id][HousePickupX], HouseData[id][HousePickupY], HouseData[id][HousePickupZ]);
				    HouseData[id][HouseIcon] = CreateDynamicMapIcon(HouseData[id][HousePickupX], HouseData[id][HousePickupY], HouseData[id][HousePickupZ], 31, 0);

				    mysql_format(connectionHandle, query, sizeof query, "INSERT INTO `Houses`\
				    (ID, HousePickupX, HousePickupY, HousePickupZ, HouseArrowX, HouseArrowY, HouseArrowZ, HouseVehX, HouseVehY, HouseVehZ, HouseVehA, HouseInterior, HouseDays, HousePrice)\
				    VALUES\
				    (%i, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %i, %i, %i)", 
				    id, HouseData[id][HousePickupX], HouseData[id][HousePickupY], HouseData[id][HousePickupZ], HouseData[id][HouseArrowX], HouseData[id][HouseArrowY], HouseData[id][HouseArrowZ],
				    HouseData[id][HouseVehX], HouseData[id][HouseVehY], HouseData[id][HouseVehZ], HouseData[id][HouseVehA], HouseData[id][Interior], HouseData[id][Days], HouseData[id][Price]);
				    mysql_tquery(connectionHandle, query);
				    Iter_Add(Houses, id);

				    SendClientMessage(playerid, green, "You have successfully made a new house");
				}
				case 7: {

					CreatingHouse[playerid] = -1;
					cmd_createhouse(playerid);
				}
			}
		}
		case DIALOG_HOUSE_INTERIOR: {

			if(!response) return cmd_createhouse(playerid);

			new id = Iter_Free(Houses);
			if(id == -1) return SendClientMessage(playerid, red, "You can't create more houses");

			HouseData[id][Interior] = listitem;
			cmd_createhouse(playerid);
		}
		case DIALOG_HOUSE_DAYS: {

			if(!response) return cmd_createhouse(playerid);

			if(!IsNumeric(inputtext)) return SendClientMessage(playerid, -1, "Invalid house days");

			new id = Iter_Free(Houses);
			if(id == -1) return SendClientMessage(playerid, red, "You can't create more houses");

			HouseData[id][Days] = strval(inputtext);
			cmd_createhouse(playerid);
		}
		case DIALOG_HOUSE_PRICE: {

			if(!response) return cmd_createhouse(playerid);

			if(!IsNumeric(inputtext)) return SendClientMessage(playerid, -1, "Invalid price amount");

			new id = Iter_Free(Houses);
			if(id == -1) return SendClientMessage(playerid, red, "You can't create more houses");

			HouseData[id][Price] = strval(inputtext);
			cmd_createhouse(playerid);
		}
		case DIALOG_BUY_HOUSE: {

			if(!response) return 0;

			new id = GetPVarInt(playerid, "HousePickupID");

			if(!IsPlayerInRangeOfPoint(playerid, 2.0, HouseData[id][HousePickupX], HouseData[id][HousePickupY], HouseData[id][HousePickupZ])) return SendClientMessage(playerid, red, "You're not near any house");
            if(HouseData[id][Price] > GetPlayerMoney(playerid)) return SendClientMessage(playerid, red, "You can't afford this house");
            if(strcmp(HouseData[id][Owner], "-")) return SendClientMessage(playerid, red, "Someone already owns this house");
		
            GivePlayerMoney(playerid, -HouseData[id][Price]);
            GetPlayerName(playerid, HouseData[id][Owner], MAX_PLAYER_NAME);

            HouseData[id][Expire] = gettime() + HouseData[id][Days] * 86400;
            HouseData[id][Save] = true;
            HouseData[id][HouseArrow] = CreateDynamicPickup(1318, 1, HouseData[id][HouseArrowX], HouseData[id][HouseArrowY], HouseData[id][HouseArrowZ]);

            UpdateHouseLabel(id);
            DestroyDynamicMapIcon(HouseData[id][HouseIcon]);
            Streamer_SetIntData(STREAMER_TYPE_PICKUP, HouseData[id][HouseArrow], E_STREAMER_MODEL_ID, 1318);
            Streamer_SetIntData(STREAMER_TYPE_PICKUP, HouseData[id][HousePickup], E_STREAMER_MODEL_ID, 1272);
            SaveHouse(id);
		}
		case DIALOG_HOUSES: {

            if(listitem == PlayerItem[playerid])
            {
                if(strfind(inputtext, "Back", true, 0) != -1)
                {
                    cmd_houses(playerid, "");
                }
                else
                {
                    new string[128], cstring[128 * 10], cnt = 0;
                    foreach(new i : Houses)
                    {
                        if(i == 0)
                        {
                            i = CompleteLoop[playerid];
                        }
                        if(cnt > 9)
                        {
                            strcat(cstring, "Next\n");
                            break;
                        }
                        else
                        {
                            if(!strcmp(HouseData[i][Owner], playerName(playerid)))
                            {
                                format(string, sizeof(string), "ID: %i Address: %s\n", i, HouseData[i][Address]);
                                strcat(cstring, string);

                                cnt++;
                                CompleteLoop[playerid] += 1;
                                PlayerItem[playerid] = cnt;
                            }
                        }
                    }
                    if(cnt <= 9)
                    {
                        strcat(cstring, "Back\n");
                    }
                    if(cnt == 0) SendClientMessage(playerid, red, "No houses found");
                    else ShowPlayerDialog(playerid, DIALOG_HOUSES, DIALOG_STYLE_LIST, "Houses", cstring, "Close", "");
                }
            }
        }
	}
	return 0;
}

/*============================================================================*/
/*-----------------------------Player Commands--------------------------------*/
/*============================================================================*/

CMD:weapons(playerid) {

	GivePlayerWeapon(playerid, 28, 500);
	GivePlayerWeapon(playerid, 34, 500);
	GivePlayerWeapon(playerid, 24, 500);
	return 1;
}

CMD:gotointerior(playerid, params[]) {

	new id;
	if(sscanf(params, "i", id)) return SendClientMessage(playerid, -1, "usage: /gotointerior id");

	SetPlayerPos(playerid, HouseInteriors[id][IntX], HouseInteriors[id][IntY], HouseInteriors[id][IntZ]);
	SetPlayerInterior(playerid, HouseInteriors[id][IntID]);
	return 1;
}

CMD:infernus(playerid) {

	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);

	CreateVehicle(411, x, y+1, z, 0, 211, 1, 0, 0);
	return 1;
}

CMD:houses(playerid, params[]) {

	new string[128], cstring[128 * 10], cnt = 0;
	foreach(new i : Houses)
    {
        if(cnt > 9)
        {
            strcat(cstring, "Next\n");
            break;
        }
        else
        {
            if(!strcmp(HouseData[i][Owner], playerName(playerid)))
            {
                format(string, sizeof(string), "ID: %i Address: %s\n", i, HouseData[i][Address]);
                strcat(cstring, string);
                
                cnt++;
                CompleteLoop[playerid] = cnt;
                PlayerItem[playerid] = cnt;
            }
        }
    }
    if(cnt == 0) SendClientMessage(playerid, red, "No houses found");
    else ShowPlayerDialog(playerid, DIALOG_HOUSES, DIALOG_STYLE_LIST, "Houses", cstring, "Close", "");
	return 1;
}

CMD:lockhouse(playerid, params[]) {

	if(isnull(params)) return SendClientMessage(playerid, red, "Lock your house: /lockhouse [House ID]");
	if(!IsNumeric(params)) return SendClientMessage(playerid, red, "Invalid house ID");

	new id = strval(params);

	if(!Iter_Contains(Houses, id)) return SendClientMessage(playerid, red, "Invalid house ID");
	if(strcmp(HouseData[id][Owner], playerName(playerid))) return SendClientMessage(playerid, red, "You're not the owner of this house");
	if(HouseData[id][LockMode] == MODE_LOCKED) return SendClientMessage(playerid, red, "This house is already locked");

	HouseData[id][LockMode] = MODE_LOCKED;

	new str[34];
	format(str, sizeof str, "You have locked house ID %i", id);
	SendClientMessage(playerid, green, str);
	return 1;
}

CMD:unlockhouse(playerid, params[]) {

	if(isnull(params)) return SendClientMessage(playerid, red, "Unlock your house: /unlockhouse [House ID]");
	if(!IsNumeric(params)) return SendClientMessage(playerid, red, "Invalid house ID");

	new id = strval(params);

	if(!Iter_Contains(Houses, id)) return SendClientMessage(playerid, red, "Invalid house ID");
	if(strcmp(HouseData[id][Owner], playerName(playerid))) return SendClientMessage(playerid, red, "You're not the owner of this house");
	if(HouseData[id][LockMode] == MODE_UNLOCKED) return SendClientMessage(playerid, red, "This house is already unlocked");

	HouseData[id][LockMode] = MODE_UNLOCKED;

	new str[34];
	format(str, sizeof str, "You have unlocked house ID %i", id);
	SendClientMessage(playerid, green, str);
	return 1;
}

CMD:respawn(playerid, params[]) {

    foreach(new x : Player) {

        foreach(new i : Houses) {

            if(IsPlayerInVehicle(x, VehicleData[i][vehID])) continue;

            SetVehicleToRespawn(VehicleData[i][vehID]);
        }
    }

    SendClientMessage(playerid, green, "You have respawned all of your vehicles");
    return 1;
}

CMD:lockvehicle(playerid, params[]) {

    if(isnull(params)) return SendClientMessage(playerid, red, "Lock your vehicle: /lockvehicle [House ID]");
    if(!IsNumeric(params)) return SendClientMessage(playerid, red, "Invalid house ID");

    new id = strval(params);

    if(!Iter_Contains(Houses, id)) return SendClientMessage(playerid, red, "Invalid house ID");
    if(strcmp(HouseData[id][Owner], playerName(playerid))) return SendClientMessage(playerid, red, "You're not the owner of this house");
    if(vehSaved[VehicleData[id][vehID]] == false) return SendClientMessage(playerid, red, "There is no vehicle saved in this house");
    if(VehicleData[id][vehLock] == V_MODE_LOCKED) return SendClientMessage(playerid, red, "This vehicle is already locked");

    VehicleData[id][vehLock] = V_MODE_LOCKED;
    foreach(new i : Player) {
        
        if(i != playerid) SetVehicleParamsForPlayer(VehicleData[id][vehLock], i, 0, 1);
    }

    new str[46];
    format(str, sizeof str, "You have locked vehicle of house ID %i", id);
    SendClientMessage(playerid, green, str);
    return 1;
}

CMD:unlockvehicle(playerid, params[]) {

    if(isnull(params)) return SendClientMessage(playerid, red, "Unlock your vehicle: /unlock [House ID]");
    if(!IsNumeric(params)) return SendClientMessage(playerid, red, "Invalid house ID");

    new id = strval(params);

    if(!Iter_Contains(Houses, id)) return SendClientMessage(playerid, red, "Invalid house ID");
    if(strcmp(HouseData[id][Owner], playerName(playerid))) return SendClientMessage(playerid, red, "You're not the owner of this house");
    if(vehSaved[VehicleData[id][vehID]] == false) return SendClientMessage(playerid, red, "There is no vehicle saved in this house");
    if(VehicleData[id][vehLock] == V_MODE_UNLOCKED) return SendClientMessage(playerid, red, "This vehicle is already unlocked");

    VehicleData[id][vehLock] = V_MODE_UNLOCKED;
    foreach(new i : Player) {
        
        SetVehicleParamsForPlayer(VehicleData[id][vehLock], i, 0, 0);
    }

    new str[46];
    format(str, sizeof str, "You have unlocked vehicle of house ID %i", id);
    SendClientMessage(playerid, green, str);
    return 1;
}

/*============================================================================*/
/*------------------------Administrator Commands------------------------------*/
/*============================================================================*/

CMD:createhouse(playerid) {

	if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, red, "You don't have the permissions for this command");

	new id = Iter_Free(Houses);
	if(id == -1) return SendClientMessage(playerid, red, "You can't create more houses");

	if(CreatingHouse[playerid] != 1) {

		HouseData[id][Price] = 0;
		HouseData[id][Interior] = 0;
		HouseData[id][Money] = 0;
		HouseData[id][Days] = 0;
		HouseData[id][HousePickupX] = HouseData[id][HousePickupY] = HouseData[id][HousePickupZ] = 0.0;
		HouseData[id][HouseArrowX] = HouseData[id][HouseArrowY] = HouseData[id][HouseArrowZ] = 0.1;
		HouseData[id][HouseVehX] = HouseData[id][HouseVehY] = HouseData[id][HouseVehZ] = 0.2;
	}

	CreatingHouse[playerid] = 1;

	new str[256];
	format(str, sizeof str, 
	"{FFFFFF}House Interior\t{2ECC71}%s\n{FFFFFF}House Days\t{2ECC71}%i\n{FFFFFF}House Price\t{2ECC71}$%s\n\
	{FFFFFF}House Pickup\t%s\n{FFFFFF}House Arrow\t%s\n{FFFFFF}House Vehicle\t%s\n{2ECC71}Create House\n{FF704D}Clear Data",
	HouseInteriors[ HouseData[id][Interior] ][IntName], HouseData[id][Days], formatNumber(HouseData[id][Price]),
	HouseData[id][HousePickupX] == 0.0 ? ("{FF704D}Undone"):("{2ECC71}Done"), HouseData[id][HouseArrowX] == 0.1 ? ("{FF704D}Undone"):("{2ECC71}Done"),
	HouseData[id][HouseVehX] == 0.2 ? ("{FF704D}Undone"):("{2ECC71}Done"));
	ShowPlayerDialog(playerid, DIALOG_CREATE_HOUSE, DIALOG_STYLE_TABLIST, "Create House", str, "Select", "Close");
	return 1;
}

CMD:gotohouse(playerid, params[]) {

	if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, red, "You don't have the permissions for this command");

	if(isnull(params)) return SendClientMessage(playerid, red, "Teleport to house: /gotohouse [House ID]");
	if(!IsNumeric(params)) return SendClientMessage(playerid, red, "Invalid house ID");
	if(!Iter_Contains(Houses, strval(params))) return SendClientMessage(playerid, red, "Invalid house ID");

	new id = strval(params);
	SetPlayerPos(playerid, HouseData[id][HousePickupX], HouseData[id][HousePickupY], HouseData[id][HousePickupZ]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	return 1;
}

CMD:sethouseinterior(playerid, params[]) {

	if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, red, "You don't have the permissions for this command");

	new id, interior;
	if(sscanf(params, "ii", id, interior)) return SendClientMessage(playerid, red, "Change house interior: /sethouseinterior [House ID] [Interior ID]");
	if(!Iter_Contains(Houses, strval(params))) return SendClientMessage(playerid, red, "Invalid house ID");
	if(!(0 <= interior <= sizeof(HouseInteriors) - 1)) return SendClientMessage(playerid, red, "Invalid interior ID");

	HouseData[id][Interior] = interior;

	new query[84];
	mysql_format(connectionHandle, query, sizeof(query), "UPDATE `Houses` SET `HouseInterior` = %i WHERE `ID` = %i", interior, id);
	mysql_tquery(connectionHandle, query);

	format(query, sizeof query, "You have changed house's (ID: %i) interior to %s", formatNumber(id), HouseInteriors[ HouseData[id][Interior] ][IntName]);
	SendClientMessage(playerid, green, query);

	UpdateHouseLabel(id);
	return 1;
}

CMD:sethouseprice(playerid, params[]) {

	if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, red, "You don't have the permissions for this command");

	new id, price;
	if(sscanf(params, "ii", id, price)) return SendClientMessage(playerid, red, "Change house price: /sethouseprice [House ID] [Price]");
	if(!Iter_Contains(Houses, strval(params))) return SendClientMessage(playerid, red, "Invalid house ID");
	if(price == 0) return SendClientMessage(playerid, red, "Invalid price amount");

	HouseData[id][Price] = price;

	new query[84];
	mysql_format(connectionHandle, query, sizeof(query), "UPDATE `Houses` SET `HousePrice` = %i WHERE `ID` = %i", price, id);
	mysql_tquery(connectionHandle, query);

	format(query, sizeof query, "You have changed house's (ID: %i) price to $%s", formatNumber(id), formatNumber(price));
	SendClientMessage(playerid, green, query);

	UpdateHouseLabel(id);
	return 1;
}

CMD:resethouse(playerid, params[]) {

	if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, red, "You don't have the permissions for this command");

	if(isnull(params)) return SendClientMessage(playerid, red, "Reset house: /resethouse [House ID]");
	if(!IsNumeric(params)) return SendClientMessage(playerid, red, "Invalid house ID");
	if(!Iter_Contains(Houses, strval(params))) return SendClientMessage(playerid, red, "Invalid house ID");

	ResetHouse(strval(params));
	return 1;
}

CMD:deletehouse(playerid, params[]) {

	if(!IsPlayerAdmin(playerid)) return SendClientMessage(playerid, red, "You don't have the permissions for this command");

	if(isnull(params)) return SendClientMessage(playerid, red, "Reset house: /resethouse [House ID]");
	if(!IsNumeric(params)) return SendClientMessage(playerid, red, "Invalid house ID");
	if(!Iter_Contains(Houses, strval(params))) return SendClientMessage(playerid, red, "Invalid house ID");

	new id = strval(params);

	ResetHouse(id);
	DestroyDynamic3DTextLabel(HouseData[id][HouseLabel]);
	DestroyDynamicPickup(HouseData[id][HousePickup]);
	DestroyDynamicPickup(HouseData[id][HouseArrow]);
	DestroyDynamicMapIcon(HouseData[id][HouseIcon]);
	Iter_Remove(Houses, id);

	HouseData[id][HouseLabel] = Text3D: INVALID_3DTEXT_ID;
	HouseData[id][HousePickup] = HouseData[id][HouseIcon] = HouseData[id][HouseArrow] = -1;
	HouseData[id][Save] = false;

	new query[64];
	mysql_format(connectionHandle, query, sizeof(query), "DELETE FROM `Houses` WHERE `ID` = %i", id);
	mysql_tquery(connectionHandle, query);
	return 1;
}

public ResetAndSaveHouses() {

	foreach(new i : Houses)
	{
	    if(strcmp(HouseData[i][Owner], "-")) {

            if(gettime() > HouseData[i][Expire]) ResetHouse(i);
        }
	    if(HouseData[i][Save] == true) SaveHouse(i);
	}
	return 1;
}

public LoadHouses() {

	new rows = cache_num_rows();
	if(rows) {

		new id, loaded, available, label[200];
		while(loaded < rows) {

			id = cache_get_field_content_int(loaded, "ID");
			cache_get_field_content(loaded, "HouseOwner", HouseData[id][Owner], .max_len = MAX_PLAYER_NAME);
			cache_get_field_content(loaded, "HouseAddress", HouseData[id][Address], .max_len = 48);
			HouseData[id][HousePickupX] = cache_get_field_content_float(loaded, "HousePickupX");
            HouseData[id][HousePickupY] = cache_get_field_content_float(loaded, "HousePickupY");
            HouseData[id][HousePickupZ] = cache_get_field_content_float(loaded, "HousePickupZ");
            HouseData[id][HouseArrowX] = cache_get_field_content_float(loaded, "HouseArrowX");
            HouseData[id][HouseArrowY] = cache_get_field_content_float(loaded, "HouseArrowY");
            HouseData[id][HouseArrowZ] = cache_get_field_content_float(loaded, "HouseArrowZ");
            HouseData[id][HouseVehX] = cache_get_field_content_float(loaded, "HouseVehX");
            HouseData[id][HouseVehY] = cache_get_field_content_float(loaded, "HouseVehY");
            HouseData[id][HouseVehZ] = cache_get_field_content_float(loaded, "HouseVehZ");
            HouseData[id][Price] = cache_get_field_content_int(loaded, "HousePrice");
            HouseData[id][Interior] = cache_get_field_content_int(loaded, "HouseInterior");
            HouseData[id][LockMode] = cache_get_field_content_int(loaded, "HouseLock");
            HouseData[id][Money] = cache_get_field_content_int(loaded, "HouseMoney");
            HouseData[id][Expire] = cache_get_field_content_int(loaded, "HouseExpire");

            if(!strcmp(HouseData[id][Owner], "-")) {

            	available = 1;
				format(label, sizeof label, "{FFFF00}House: {2ECC71}%s\n{FFFF00}Interior: {2ECC71}%s\n{FFFF00}Expiration Days: {2ECC71}%s\n{FFFF00}Price: {2ECC71}$%s", 
				formatNumber(id), HouseInteriors[ HouseData[id][Interior] ][IntName], formatNumber(HouseData[id][Days]), formatNumber(HouseData[id][Price]));
			}
			else {

				available = 0;
				format(label, sizeof label, "{FFFF00}House: {2ECC71}%s\n{FFFF00}Owner: {2ECC71}%s\n{FFFF00}Interior: {2ECC71}%s", 
				formatNumber(id), HouseData[id][Owner], HouseInteriors[ HouseData[id][Interior] ][IntName]);
			}

			switch(available) {

				case 1: HouseData[id][HousePickup] = CreateDynamicPickup(1273, 1, HouseData[id][HousePickupX], HouseData[id][HousePickupY], HouseData[id][HousePickupZ]);
				case 0: {

					HouseData[id][HousePickup] = CreateDynamicPickup(1272, 1, HouseData[id][HousePickupX], HouseData[id][HousePickupY], HouseData[id][HousePickupZ]);

					new playerid = playerID(HouseData[id][Owner]);
					if(IsPlayerConnected(playerid)) HouseData[id][HouseArrow] = CreateDynamicPickup(1318, 1, HouseData[id][HouseArrowX], HouseData[id][HouseArrowY], HouseData[id][HouseArrowZ]);
				}
			}

            HouseData[id][HouseLabel] = CreateDynamic3DTextLabel(label, 0xFFFF00FF, HouseData[id][HousePickupX], HouseData[id][HousePickupY], HouseData[id][HousePickupZ] + 0.35, 15.0, .testlos = 1);
			Iter_Add(Houses, id);
            loaded++;
		}
		printf("Loaded %i Houses", loaded);
	}
	return 1;
}

public LoadVehicles(houseid) {

	new rows = cache_num_rows();
	if(rows) {

		cache_get_field_content(0, "vehOwner", VehicleData[houseid][vehOwner], connectionHandle, MAX_PLAYER_NAME);
        cache_get_field_content(0, "vehName", VehicleData[houseid][vehName], connectionHandle, 25);
        cache_get_field_content(0, "vehPlate", VehicleData[houseid][vehPlate], connectionHandle, 16);
        VehicleData[houseid][vehModel] = cache_get_field_content_int(0, "vehModel");
        VehicleData[houseid][vehLock] = cache_get_field_content_int(0, "vehLock");
        VehicleData[houseid][vehMod][0] = cache_get_field_content_int(0, "vehMod_1");
        VehicleData[houseid][vehMod][1] = cache_get_field_content_int(0, "vehMod_2");
        VehicleData[houseid][vehMod][2] = cache_get_field_content_int(0, "vehMod_3");
        VehicleData[houseid][vehMod][3] = cache_get_field_content_int(0, "vehMod_4");
        VehicleData[houseid][vehMod][4] = cache_get_field_content_int(0, "vehMod_5");
        VehicleData[houseid][vehMod][5] = cache_get_field_content_int(0, "vehMod_6");
        VehicleData[houseid][vehMod][6] = cache_get_field_content_int(0, "vehMod_7");
        VehicleData[houseid][vehMod][7] = cache_get_field_content_int(0, "vehMod_8");
        VehicleData[houseid][vehMod][8] = cache_get_field_content_int(0, "vehMod_9");
        VehicleData[houseid][vehMod][9] = cache_get_field_content_int(0, "vehMod_10");
        VehicleData[houseid][vehMod][10] = cache_get_field_content_int(0, "vehMod_11");
        VehicleData[houseid][vehMod][11] = cache_get_field_content_int(0, "vehMod_12");
        VehicleData[houseid][vehMod][12] = cache_get_field_content_int(0, "vehMod_13");
        VehicleData[houseid][vehMod][13] = cache_get_field_content_int(0, "vehMod_14");
        VehicleData[houseid][vehColorOne] = cache_get_field_content_int(0, "vehColorOne");
        VehicleData[houseid][vehColorTwo] = cache_get_field_content_int(0, "vehColorTwo");

        VehicleData[houseid][vehID] = CreateVehicle(VehicleData[houseid][vehModel], HouseData[houseid][HouseVehX], HouseData[houseid][HouseVehY], HouseData[houseid][HouseVehZ], HouseData[houseid][HouseVehA], VehicleData[houseid][vehColorOne], VehicleData[houseid][vehColorTwo], -1);

        vehSaved[VehicleData[houseid][vehID]] = true;

        SetVehicleParamsEx(VehicleData[houseid][vehID], 1, 0, 0, 0, 0, 0, 0);
        foreach(new i : Player) {

        	new playerid = GetID(VehicleData[houseid][vehOwner]);
        	if(playerid != INVALID_PLAYER_ID && i != playerid) {

        		SetVehicleParamsForPlayer(VehicleData[houseid][vehID], i, 0, VehicleData[houseid][vehLock]);
        	}
        }
        SetVehicleNumberPlate(VehicleData[houseid][vehID], VehicleData[houseid][vehPlate]);
        for(new x = 0; x < 14; x++) if(VehicleData[houseid][vehMod][x] > 0) AddVehicleComponent(VehicleData[houseid][vehID], VehicleData[houseid][vehMod][x]);

        printf("Loaded %s for House ID: %i", GetVehicleName(VehicleData[houseid][vehID]), houseid);
	}
	return 1;
}

public LoadWeapons(houseid) {

	new rows = cache_num_rows();
	if(rows) {

        for(new i; i < rows; i++) {

            new weaponid;
            weaponid = cache_get_field_content_int(i, "WeaponID");

            for(new x; x < MAX_WEAPONS; x++) gWeaponAmmo[houseid][x] = 0;

            gWeapon[houseid][weaponid] = weaponid;
            gWeaponAmmo[houseid][weaponid] = cache_get_field_content_int(i, "Ammo");
        }
	}
	return 1;
}

public ShowInfo(playerid) {

	if(InHouse[playerid] != INVALID_HOUSE_ID) {

		if(!strcmp(HouseData[InHouse[playerid]][Owner], playerName(playerid))) {

			for(new i; i < sizeof(BoxesAngle); i++) {

				if(IsPlayerInRangeOfPoint(playerid, 0.5, BoxesAngle[i][0], BoxesAngle[i][1], BoxesAngle[i][2]) && UsingSafe[playerid] != 1) {

					SendClientMessage(playerid, green, "Press RETURN to open your house's safe box");
				}

				if(IsPlayerInRangeOfPoint(playerid, 0.5, HouseWeaponsBoxes[i][ObjectX], HouseWeaponsBoxes[i][ObjectY], HouseWeaponsBoxes[i][ObjectZ]) && UsingWeaponBox[playerid] != 1) {

					SendClientMessage(playerid, green, "Press RETURN to open your house's weapon box");
				}
			}
		}
	}
	return 1;
}

public IncreaseAmount(playerid) {

	new keys, ud, lr, Float:x, Float:y, Float:z;
	GetPlayerKeys(playerid, keys, ud, lr);
	GetPlayerPos(playerid, x, y, z);
	
	if(keys & KEY_JUMP)
	{
		HoldingCount[playerid]++;
		PlayerPlaySound(playerid, 1054, x, y, z);
		
		switch(HoldingCount[playerid]) {

			case 0 .. 6: {

				if(CurrentAmount[playerid] >= 1) {
				
					CurrentAmount[playerid] -= 1;
					SavedAmount[playerid] += 1;
				}
			}
			case 7 .. 13: {

				if(CurrentAmount[playerid] >= 10) {

					CurrentAmount[playerid] -= 10;
					SavedAmount[playerid] += 10;
				}
			}
			case 14 .. 20: {

				if(CurrentAmount[playerid] >= 100) {

					CurrentAmount[playerid] -= 100;
					SavedAmount[playerid] += 100;
				}
			}
			case 21 .. 27: {

				if(CurrentAmount[playerid] >= 500) {
					
					CurrentAmount[playerid] -= 500;
					SavedAmount[playerid] += 500;
				}
			}
			case 28 .. 34: {

				if(CurrentAmount[playerid] >= 5000) {
					
					CurrentAmount[playerid] -= 5000;
					SavedAmount[playerid] += 5000;
				}
			}
			case 35 .. 41: {

				if(CurrentAmount[playerid] >= 50000) {
					
					CurrentAmount[playerid] -= 50000;
					SavedAmount[playerid] += 50000;
				}
			}
			case 42 .. 48: {

				if(CurrentAmount[playerid] >= 500000) {

					CurrentAmount[playerid] -= 500000;
					SavedAmount[playerid] += 500000;
				}
			}
			default: {

				if(CurrentAmount[playerid] >= 1000000) {
					
					CurrentAmount[playerid] -= 1000000;
					SavedAmount[playerid] += 1000000;
				}
			}
		}

		if(CurrentAmount[playerid] <= 0) {

			CurrentAmount[playerid] = 0;
		}

		new currentamount[11], savedamount[11];
		if(UsingSafe[playerid] != INVALID_HOUSE_ID) {

			format(currentamount, sizeof currentamount, "$%s", formatNumber(CurrentAmount[playerid]));
			format(savedamount, sizeof savedamount, "$%s", formatNumber(SavedAmount[playerid]));
		}
		else if(UsingWeaponBox[playerid] != INVALID_HOUSE_ID) {

			format(currentamount, sizeof currentamount, "%i", CurrentAmount[playerid]);
			format(savedamount, sizeof savedamount, "%i", SavedAmount[playerid]);
		}

		PlayerTextDrawSetString(playerid, ItemOne[playerid], currentamount);
		PlayerTextDrawSetString(playerid, ItemTwo[playerid], savedamount);
	
	    SetTimerEx("IncreaseAmount", 100, 0, "i", playerid);
	    return 0;
	}

	HoldingKey[playerid][0] = 0;
	HoldingCount[playerid] = 0;
	return 0;
}

public DecreaseAmount(playerid) {

	new keys, ud, lr, Float:x, Float:y, Float:z;
	GetPlayerKeys(playerid, keys, ud, lr);
	GetPlayerPos(playerid, x, y, z);
	
	if(keys & KEY_FIRE)
	{
		HoldingCount[playerid]++;
		PlayerPlaySound(playerid, 1054, x, y, z);

		switch(HoldingCount[playerid]) {

			case 0 .. 6: {

				if(SavedAmount[playerid] >= 1) {
					
					CurrentAmount[playerid] += 1;
					SavedAmount[playerid] -= 1;
				}
			}
			case 7 .. 13: {

				if(SavedAmount[playerid] >= 10) {

					CurrentAmount[playerid] += 10;
					SavedAmount[playerid] -= 10;
				}
			}
			case 14 .. 20: {

				if(SavedAmount[playerid] >= 100) {

					CurrentAmount[playerid] += 100;
					SavedAmount[playerid] -= 100;
				}
			}
			case 21 .. 27: {

				if(SavedAmount[playerid] >= 500) {
					
					CurrentAmount[playerid] += 500;
					SavedAmount[playerid] -= 500;
				}
			}
			case 28 .. 34: {

				if(SavedAmount[playerid] >= 5000) {
					
					CurrentAmount[playerid] += 5000;
					SavedAmount[playerid] -= 5000;
				}
			}
			case 35 .. 41: {

				if(SavedAmount[playerid] >= 50000) {
					
					CurrentAmount[playerid] += 50000;
					SavedAmount[playerid] -= 50000;
				}
			}
			case 42 .. 48: {

				if(SavedAmount[playerid] >= 500000) {
					
					CurrentAmount[playerid] += 500000;
					SavedAmount[playerid] -= 500000;
				}
			}
			default: {

				if(SavedAmount[playerid] >= 1000000) {
					
					CurrentAmount[playerid] += 1000000;
					SavedAmount[playerid] -= 1000000;
				}
			}
		}

		if(SavedAmount[playerid] <= 0) {

			SavedAmount[playerid] = 0;
		}

		new currentamount[11], savedamount[11];
		if(UsingSafe[playerid] != INVALID_HOUSE_ID) {

			format(currentamount, sizeof currentamount, "$%s", formatNumber(CurrentAmount[playerid]));
			format(savedamount, sizeof savedamount, "$%s", formatNumber(SavedAmount[playerid]));
		}
		else if(UsingWeaponBox[playerid] != INVALID_HOUSE_ID) {

			format(currentamount, sizeof currentamount, "%i", CurrentAmount[playerid]);
			format(savedamount, sizeof savedamount, "%i", SavedAmount[playerid]);
		}

		PlayerTextDrawSetString(playerid, ItemOne[playerid], currentamount);
		PlayerTextDrawSetString(playerid, ItemTwo[playerid], savedamount);
	
	    SetTimerEx("DecreaseAmount", 100, 0, "i", playerid);
	    return 0;
	}

	HoldingKey[playerid][1] = 0;
	HoldingCount[playerid] = 0;
	return 0;
}

public SafeMoney(playerid) {

	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, CurrentAmount[playerid]);

	HouseData[InHouse[playerid]][Money] = SavedAmount[playerid];
	HouseData[InHouse[playerid]][Save] = true;

	new query[64];
	mysql_format(connectionHandle, query, sizeof query, "UPDATE `Houses` SET `HouseMoney` = %i WHERE `ID` = %i", HouseData[InHouse[playerid]][Money], InHouse[playerid]);
	mysql_tquery(connectionHandle, query);

	HoldingCount[playerid] = HoldingKey[playerid][0] = HoldingKey[playerid][1] = 0;
	UsingSafe[playerid] = INVALID_HOUSE_ID;
	CurrentAmount[playerid] = 0;
	SavedAmount[playerid] = 0;
	SafeMoneyAnim[playerid] = 0;
	return 1;
}

public SwitchWeapons(playerid) {

	new keys, ud, lr;
	GetPlayerKeys(playerid, keys, ud, lr);

	if(InHouse[playerid] != INVALID_HOUSE_ID) {

		if(!strcmp(HouseData[InHouse[playerid]][Owner], playerName(playerid))) {

			if(UsingWeaponBox[playerid] != INVALID_HOUSE_ID) {

				new currentammo[11], savedammo[11];

				if(lr == KEY_RIGHT) {

					CurrentAmount[playerid] = 0;
					SavedAmount[playerid] = 0;

					if(gNextWeapon[playerid] < MAX_WEAPONS)
						gNextWeapon[playerid]++;

					if(gNextWeapon[playerid] == MAX_WEAPONS)
				    	gNextWeapon[playerid] = 0;

					PlayerTextDrawSetString(playerid, ColumnOne[playerid], HouseWeapons[gNextWeapon[playerid]][WeaponName]);
                    SetPlayerWeapon(playerid, HouseWeapons[gNextWeapon[playerid]][WeaponID]);

                    format(currentammo, sizeof currentammo, "%i", GetPlayerWeaponAmmo(playerid, HouseWeapons[gNextWeapon[playerid]][WeaponID]));
					format(savedammo, sizeof savedammo, "%i", gWeaponAmmo[InHouse[playerid]][HouseWeapons[gNextWeapon[playerid]][WeaponID]]);

					PlayerTextDrawSetString(playerid, ItemOne[playerid], currentammo);
					PlayerTextDrawSetString(playerid, ItemTwo[playerid], savedammo);
				}
				if(lr == KEY_LEFT) {

					CurrentAmount[playerid] = 0;
					SavedAmount[playerid] = 0;
				    	
				    if(gNextWeapon[playerid] == 0)
				    	gNextWeapon[playerid] = MAX_WEAPONS;

					if(gNextWeapon[playerid] > 0)
						gNextWeapon[playerid]--;

					PlayerTextDrawSetString(playerid, ColumnOne[playerid], HouseWeapons[gNextWeapon[playerid]][WeaponName]);
                    SetPlayerWeapon(playerid, HouseWeapons[gNextWeapon[playerid]][WeaponID]);

                    format(currentammo, sizeof currentammo, "%i", GetPlayerWeaponAmmo(playerid, HouseWeapons[gNextWeapon[playerid]][WeaponID]));
					format(savedammo, sizeof savedammo, "%i", gWeaponAmmo[InHouse[playerid]][HouseWeapons[gNextWeapon[playerid]][WeaponID]]);

					PlayerTextDrawSetString(playerid, ItemOne[playerid], currentammo);
					PlayerTextDrawSetString(playerid, ItemTwo[playerid], savedammo);
				}
			}
		}
	}
	return 1;
}

ResetHouse(houseid) {

	if(!Iter_Contains(Houses, houseid)) return 0;

	format(HouseData[houseid][Owner], MAX_PLAYER_NAME, "-");

	HouseData[houseid][LockMode] = MODE_UNLOCKED;
	HouseData[houseid][Money] = 0;
    HouseData[houseid][Save] = true;

    new label[220];
    format(label, sizeof label, "{FFFF00}House: {2ECC71}%s\n{FFFF00}Interior: {2ECC71}%s\n{FFFF00}Expiration Days: {2ECC71}%s\n{FFFF00}Price: {2ECC71}$%s", 
	formatNumber(houseid), HouseInteriors[ HouseData[houseid][Interior] ][IntName], formatNumber(HouseData[houseid][Days]), formatNumber(HouseData[houseid][Price]));
	UpdateDynamic3DTextLabelText(HouseData[houseid][HouseLabel], 0xFFFFFFFF, label);

    if(IsValidDynamicPickup(HouseData[houseid][HouseArrow])) DestroyDynamicPickup(HouseData[houseid][HouseArrow]);

    DestroyDynamicMapIcon(HouseData[houseid][HouseIcon]);

    Streamer_SetIntData(STREAMER_TYPE_PICKUP, HouseData[houseid][HousePickup], E_STREAMER_MODEL_ID, 1273);
	HouseData[houseid][HouseIcon] = CreateDynamicMapIcon(HouseData[houseid][HousePickupX], HouseData[houseid][HousePickupY], HouseData[houseid][HousePickupZ], 31, 0);

	foreach(new i : Player)
    {
        if(InHouse[i] == houseid)
        {
            SetPVarInt(i, "HousePickupCooldown", gettime() + 6);
        	SetPlayerVirtualWorld(i, 0);
	        SetPlayerInterior(i, 0);
	        SetPlayerPos(i, HouseData[houseid][HouseArrowX], HouseData[houseid][HouseArrowY], HouseData[houseid][HouseArrowZ]);
	        InHouse[i] = INVALID_HOUSE_ID;
        }
   	}

   	new query[64];
    mysql_format(connectionHandle, query, sizeof(query), "DELETE FROM `HouseVehicles` WHERE `HouseID` = %i", houseid);
    mysql_tquery(connectionHandle, query);
	return 1;
}

SaveHouse(houseid) {

    if(!Iter_Contains(Houses, houseid)) return 0;

	new query[204];
	mysql_format(connectionHandle, query, sizeof query, "UPDATE `Houses` SET `HouseOwner` = '%e', `HouseLock` = %i, `HouseMoney` = %i, `HouseExpire` = %i WHERE `ID` = %i",
	HouseData[houseid][Owner], HouseData[houseid][LockMode], HouseData[houseid][Money], HouseData[houseid][Expire], houseid);
	mysql_tquery(connectionHandle, query);

	HouseData[houseid][Save] = false;
	return 1;
}

SaveVehicle(houseid)
{
    if(!Iter_Contains(Houses, houseid)) return 0;
    if(vehSaved[VehicleData[houseid][vehID]] == false) return 0;

    new color1, color2;
    GetVehicleColor(VehicleData[houseid][vehID], color1, color2);

    format(VehicleData[houseid][vehName], 16, GetVehicleName(VehicleData[houseid][vehID]));
    VehicleData[houseid][vehColorOne] = color1;
    VehicleData[houseid][vehColorTwo] = color2;
    vehSaved[VehicleData[houseid][vehID]] = true;

    new query[660];
    mysql_format(connectionHandle, query, sizeof(query), "UPDATE `HouseVehicles` SET `vehName` = '%e', `vehOwner` = '%e', `vehLock` = %i, `vehModel` = %i,\
    `vehPlate` = '%e', `vehMod_1` = %i, `vehMod_2` = %i, `vehMod_3` = %i, `vehMod_4` = %i, `vehMod_5` = %i, `vehMod_6` = %i, `vehMod_7` = %i,\
    `vehMod_8` = %i, `vehMod_9` = %i, `vehMod_10` = %i, `vehMod_11` = %i, `vehMod_12` = %i, `vehMod_13` = %i, `vehMod_14` = %i, `vehColorOne` = %i,\
    `vehColorTwo` = %i WHERE `HouseID` = %i", VehicleData[houseid][vehName], VehicleData[houseid][vehOwner], VehicleData[houseid][vehLock], VehicleData[houseid][vehModel], VehicleData[houseid][vehPlate], 
    VehicleData[houseid][vehMod][0], VehicleData[houseid][vehMod][1], VehicleData[houseid][vehMod][2], VehicleData[houseid][vehMod][3], VehicleData[houseid][vehMod][4], VehicleData[houseid][vehMod][5], 
    VehicleData[houseid][vehMod][6], VehicleData[houseid][vehMod][7], VehicleData[houseid][vehMod][8], VehicleData[houseid][vehMod][9], VehicleData[houseid][vehMod][10], VehicleData[houseid][vehMod][11], 
    VehicleData[houseid][vehMod][12], VehicleData[houseid][vehMod][13], VehicleData[houseid][vehColorOne], VehicleData[houseid][vehColorTwo], houseid);
    mysql_tquery(connectionHandle, query);
    return 1;
}

UpdateHouseLabel(houseid) {

	if(!Iter_Contains(Houses, houseid)) return 0;

	new label[220];

	if(!strcmp(HouseData[houseid][Owner], "-")) {

		format(label, sizeof label, "{FFFF00}House: {2ECC71}%s\n{FFFF00}Interior: {2ECC71}%s\n{FFFF00}Expiration Days: {2ECC71}%s\n{FFFF00}Price: {2ECC71}$%s", 
		formatNumber(houseid), HouseInteriors[ HouseData[houseid][Interior] ][IntName], formatNumber(HouseData[houseid][Days]), formatNumber(HouseData[houseid][Price]));

		if(!IsValidDynamicMapIcon(HouseData[houseid][HouseIcon])) HouseData[houseid][HouseIcon] = CreateDynamicMapIcon(HouseData[houseid][HousePickupX], HouseData[houseid][HousePickupY], HouseData[houseid][HousePickupZ], 31, 0);
	}
	else {

		format(label, sizeof label, "{FFFF00}House: {2ECC71}%s\n{FFFF00}Owner: {2ECC71}%s\n{FFFF00}Interior: {2ECC71}%s", 
		formatNumber(houseid), HouseData[houseid][Owner], HouseInteriors[ HouseData[houseid][Interior] ][IntName]);
		if(IsValidDynamicMapIcon(HouseData[houseid][HouseIcon])) DestroyDynamicMapIcon(HouseData[houseid][HouseIcon]);
	}

	UpdateDynamic3DTextLabelText(HouseData[houseid][HouseLabel], 0xFFFFFFFF, label);
	return 1;
}

SendToHouse(playerid, houseid) {

    if(!Iter_Contains(Houses, houseid)) return 0;

    InHouse[playerid] = houseid;

    SetPVarInt(playerid, "HousePickupCooldown", gettime() + 6);
	SetPlayerVirtualWorld(playerid, houseid);
 	SetPlayerInterior(playerid, HouseInteriors[ HouseData[houseid][Interior] ][IntID]);
  	SetPlayerPos(playerid, HouseInteriors[ HouseData[houseid][Interior] ][IntX], HouseInteriors[ HouseData[houseid][Interior] ][IntY], HouseInteriors[ HouseData[houseid][Interior] ][IntZ]);

	if(!strcmp(HouseData[houseid][Owner], playerName(playerid))) {

		HouseData[houseid][Save] = true;
		InfoTimer[playerid] = SetTimerEx("ShowInfo", 5000, 1, "i", playerid);

		new query[57];
    	mysql_format(connectionHandle, query, sizeof query, "SELECT * FROM `HouseWeapons` WHERE `Owner` = '%e'", playerName(playerid));
    	mysql_tquery(connectionHandle, query, "LoadWeapons", "i", houseid);
	}
	return 1;
}

ownerID(houseid)
{
	foreach(new i : Player)
	{
		if(!strcmp(HouseData[houseid][Owner], playerName(i), true)) return i;
	}
	return INVALID_PLAYER_ID;
}

playerID(name[])
{
	foreach(new i : Player)
	{
	    if(!strcmp(playerName(i), name, true)) return i;
	}
	return INVALID_PLAYER_ID;
}

playerName(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, MAX_PLAYER_NAME);
	return name;
}

formatNumber(integer, const separator[] = ",") {

    new string[16];
    valstr(string, integer);

    if(integer >= 1000)
    {
        for(new i = (strlen(string) - 3); i > 0; i -= 3)
        {
            strins(string, separator, i);
        }
    }
    return string; 
}

IsNumeric(string[])
{
    for (new i = 0, j = strlen(string); i < j; i++)
    {
    	if (string[i] > '9' || string[i] < '0') return 0;
    }
    return 1;
}

GetZoneName(Float: x, Float: y, Float: z) {

	new zone[28];
 	for(new i = 0; i < sizeof(SAZones); i++)
 	{
		if(x >= SAZones[i][SAZONE_AREA][0] && x <= SAZones[i][SAZONE_AREA][3] && y >= SAZones[i][SAZONE_AREA][1] && y <= SAZones[i][SAZONE_AREA][4] && z >= SAZones[i][SAZONE_AREA][2] && z <= SAZones[i][SAZONE_AREA][5])
		{
		    strcat(zone, SAZones[i][SAZONE_NAME]);
		    return zone;
		}
	}

	strcat(zone, "Unknown");
	return zone;
}

GetCityName(Float: x, Float: y, Float: z) {

	new city[28];
	for(new i = 356; i < sizeof(SAZones); i++)
	{
		if(x >= SAZones[i][SAZONE_AREA][0] && x <= SAZones[i][SAZONE_AREA][3] && y >= SAZones[i][SAZONE_AREA][1] && y <= SAZones[i][SAZONE_AREA][4] && z >= SAZones[i][SAZONE_AREA][2] && z <= SAZones[i][SAZONE_AREA][5])
		{
		    strcat(city, SAZones[i][SAZONE_NAME]);
		    return city;
		}
	}

	strcat(city, "San Andreas");
	return city;
}

GetVehicleName(vehicleid)
{
	static const
		scVehicleNames[][18] = {

		    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Pereniel", "Sentinel", "Dumper", "Firetruck", "Trashmaster", "Stretch", "Manana", "Infernus","Voodoo", "Pony",
		    "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam", "Esperanto", "Taxi", "Washington", "Bobcat", "Mr Whoopee", "BF Injection", "Hunter", "Premier", "Enforcer",
		    "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach", "Cabbie", "Stallion", "Rumpo", "RC Bandit", "Romero",
		    "Packer", "Monster", "Admiral", "Squalo", "Seasparrow", "Pizzaboy", "Tram", "Trailer 2", "Turismo", "Speeder", "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy",
		    "Solair", "Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale", "Oceanic", "Sanchez", "Sparrow", "Patriot", "Quad",
		    "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR3 50", "Walton", "Regina", "Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick",
		    "News Chopper", "Rancher", "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking", "Blista Compact", "Police Maverick", "Boxville", "Benson", "Mesa",
		    "RC Goblin", "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher", "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropdust",
		    "Stunt", "Tanker", "RoadTrain", "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck", "Fortune",
		    "Cadrona", "FBI Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer", "Remington", "Slamvan", "Blade", "Freight", "Streak", "Vortex", "Vincent", "Bullet",
		    "Clover", "Sadler", "Firetruck", "Hustler", "Intruder", "Primo", "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite", "Windsor", "Monster A",
		    "Monster B", "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito", "Freight", "Trailer", "Kart", "Mower",
		    "Duneride", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30", "Huntley", "Stafford", "BF-400", "Newsvan", "Tug", "Trailer A", "Emperor", "Wayfarer", "Euros",
		    "Hotdog", "Club", "Trailer B", "Trailer C", "Andromada", "Dodo", "RC Cam", "Launch", "Police Car (LSPD)", "Police Car (SFPD)", "Police Car (LVPD)", "Police Ranger",
		    "Picador", "S.W.A.T. Van", "Alpha", "Phoenix", "Glendale", "Sadler", "Luggage Trailer A", "Luggage Trailer B", "Stair Trailer", "Boxville", "Farm Plow", "Utility Trailer"
		},
		scOnFoot[18] = "OnFoot";
	if (vehicleid > 0) return scVehicleNames[GetVehicleModel(vehicleid) - 400];
	else return scOnFoot;
}

GetID(name[]) {

	foreach(new i : Player) {

	    if(!strcmp(playerName(i), name, true)) return i;
	}
	return INVALID_PLAYER_ID;
}

/*GetWeaponSlot(weaponid) {

	new slot;
	switch(weaponid)
	{
		case 0, 1: slot = 0;
		case 2 .. 9: slot = 1;
		case 10 .. 15: slot = 10;
		case 16 .. 18, 39: slot = 8;
		case 22 .. 24: slot =2;
		case 25 .. 27: slot = 3;
		case 28, 29, 32: slot = 4;
		case 30, 31: slot = 5;
		case 33, 34: slot = 6;
		case 35 .. 38: slot = 7;
		case 40: slot = 12;
		case 41 .. 43: slot = 9;
		case 44 .. 46: slot = 11;
	}
	return slot;
}*/

GetPlayerWeaponAmmo(playerid, weaponid) {

    new wpid, ammo;
    for (new i = 0; i <= 12; i++) {

        GetPlayerWeaponData(playerid, i, wpid, ammo);

        if(weaponid == wpid) {

            return ammo;
        }
    }
    return 0;
}

SetPlayerWeapon(playerid, weaponid) {

    new wpid, ammo;
    for (new i = 0; i <= 12; i++) {

        GetPlayerWeaponData(playerid, i, wpid, ammo);

        if(weaponid == wpid) {

            SetPlayerArmedWeapon(playerid, wpid);

            CurrentAmount[playerid] = ammo;
            SavedAmount[playerid] = gWeaponAmmo[InHouse[playerid]][wpid];
            break;
        }
        else {

            SetPlayerArmedWeapon(playerid, 0);

            CurrentAmount[playerid] = 0;
            SavedAmount[playerid] = gWeaponAmmo[InHouse[playerid]][wpid];
            continue;
        }
    }
    return 1;
}
